import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface ScanResult {
  id: string;
  severity: 'critical' | 'high' | 'medium' | 'low';
  name: string;
  description: string;
  affected_component: string;
  remediation_steps: string[];
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { user_id, scan_type, active_services, project_data } = await req.json();
    
    if (!user_id) {
      throw new Error('User ID is required');
    }

    console.log('Starting vulnerability scan...', { scan_type, active_services });

    // Initialize Supabase client
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    );

    // Create scan record
    const { data: scanRecord, error: insertError } = await supabaseClient
      .from('vulnerability_scans')
      .insert({
        user_id,
        scan_type,
        status: 'in_progress',
        start_time: new Date().toISOString(),
      })
      .select()
      .single();

    if (insertError) {
      console.error('Error creating scan record:', insertError);
      throw insertError;
    }

    // Analyze dependencies
    const findings: ScanResult[] = [];
    if (project_data?.dependencies) {
      for (const [name, version] of Object.entries(project_data.dependencies)) {
        // Simulate dependency analysis
        if (Math.random() < 0.3) { // 30% chance of finding vulnerability for demo
          findings.push({
            id: crypto.randomUUID(),
            severity: Math.random() < 0.5 ? 'high' : 'medium',
            name: `Vulnerability in ${name}`,
            description: `Potential security issue found in ${name}@${version}`,
            affected_component: name,
            remediation_steps: [`Update ${name} to latest version`]
          });
        }
      }
    }

    // Calculate severity breakdown
    const severityBreakdown = findings.reduce((acc, finding) => {
      acc[finding.severity] = (acc[finding.severity] || 0) + 1;
      return acc;
    }, { critical: 0, high: 0, medium: 0, low: 0 });

    // Update scan record with results
    const { error: updateError } = await supabaseClient
      .from('vulnerability_scans')
      .update({
        status: 'completed',
        end_time: new Date().toISOString(),
        total_vulnerabilities: findings.length,
        severity_breakdown: severityBreakdown,
        findings: findings,
      })
      .eq('id', scanRecord.id);

    if (updateError) {
      console.error('Error updating scan results:', updateError);
      throw updateError;
    }

    console.log('Scan completed successfully');
    
    return new Response(
      JSON.stringify({ 
        scan_id: scanRecord.id,
        findings,
        severityBreakdown,
        total_vulnerabilities: findings.length
      }),
      { 
        headers: { 
          ...corsHeaders,
          'Content-Type': 'application/json'
        }
      }
    );

  } catch (error) {
    console.error('Error during vulnerability scan:', error);
    return new Response(
      JSON.stringify({
        error: error.message || 'Internal server error',
      }),
      { 
        headers: { 
          ...corsHeaders,
          'Content-Type': 'application/json'
        },
        status: 500
      }
    );
  }
});