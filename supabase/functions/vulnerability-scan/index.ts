import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('Starting vulnerability scan...');
    
    // Initialize Supabase client
    const supabaseUrl = Deno.env.get('SUPABASE_URL');
    const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');

    if (!supabaseUrl || !supabaseKey) {
      throw new Error('Missing Supabase configuration');
    }

    const supabaseClient = createClient(supabaseUrl, supabaseKey);

    // Parse request body
    const { user_id, scan_type, target_url } = await req.json();

    if (!user_id) {
      throw new Error('User ID is required');
    }

    console.log(`Starting scan for user ${user_id}, type: ${scan_type}, target: ${target_url}`);

    // Create initial scan record
    const { data: scan, error: insertError } = await supabaseClient
      .from('vulnerability_scans')
      .insert({
        user_id,
        scan_type: scan_type || 'comprehensive',
        target_url,
        status: 'in_progress',
        start_time: new Date().toISOString(),
        total_vulnerabilities: 0,
        severity_breakdown: {
          critical: 0,
          high: 0,
          medium: 0,
          low: 0,
        },
        findings: []
      })
      .select()
      .single();

    if (insertError) {
      console.error('Error creating scan record:', insertError);
      throw insertError;
    }

    // Simulate finding vulnerabilities (in a real implementation, this would be actual scanning logic)
    const mockFindings = [
      {
        id: crypto.randomUUID(),
        name: "Cross-Site Scripting (XSS)",
        description: "Potential XSS vulnerability detected in input handling",
        severity: "high",
        affected_component: "User Input Forms",
        remediation_steps: [
          "Implement input validation",
          "Use content security policy",
          "Sanitize user input"
        ],
        references: [
          "https://owasp.org/www-community/attacks/xss/",
        ],
        discovered_at: new Date().toISOString()
      }
    ];

    // Update scan with findings
    const { error: updateError } = await supabaseClient
      .from('vulnerability_scans')
      .update({
        status: 'completed',
        end_time: new Date().toISOString(),
        total_vulnerabilities: mockFindings.length,
        severity_breakdown: {
          critical: 0,
          high: 1,
          medium: 0,
          low: 0,
        },
        findings: mockFindings
      })
      .eq('id', scan.id);

    if (updateError) {
      console.error('Error updating scan record:', updateError);
      throw updateError;
    }

    console.log('Scan completed successfully');

    return new Response(
      JSON.stringify({ 
        message: 'Scan completed successfully', 
        scan_id: scan.id 
      }),
      { 
        headers: { 
          ...corsHeaders, 
          'Content-Type': 'application/json' 
        } 
      }
    );

  } catch (error) {
    console.error('Error in vulnerability scan:', error);
    return new Response(
      JSON.stringify({ 
        error: error.message || 'An error occurred during the scan' 
      }),
      { 
        status: 500,
        headers: { 
          ...corsHeaders, 
          'Content-Type': 'application/json' 
        }
      }
    );
  }
});