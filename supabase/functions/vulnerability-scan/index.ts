import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";
import { performNpmAudit } from "./services/npmAuditService.ts";
import { analyzeServiceSecurity } from "./services/serviceAnalyzer.ts";
import { ScanResult } from "./types.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('Starting vulnerability scan...');
    
    const supabaseUrl = Deno.env.get('SUPABASE_URL');
    const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');

    if (!supabaseUrl || !supabaseKey) {
      throw new Error('Missing Supabase configuration');
    }

    const supabase = createClient(supabaseUrl, supabaseKey);
    
    const { user_id, scan_type = 'quick', project_data, active_services } = await req.json();
    
    if (!user_id) {
      throw new Error('User ID is required');
    }

    console.log(`Starting ${scan_type} vulnerability scan for user ${user_id}`);
    console.log('Active services:', active_services);

    // Create initial scan record
    const { data: scan, error: insertError } = await supabase
      .from('vulnerability_scans')
      .insert({
        user_id,
        scan_type,
        status: 'in_progress',
        start_time: new Date().toISOString(),
        total_vulnerabilities: 0,
        severity_breakdown: {
          critical: 0,
          high: 0,
          medium: 0,
          low: 0
        },
        findings: []
      })
      .select()
      .single();

    if (insertError) {
      console.error('Error creating scan:', insertError);
      throw insertError;
    }

    // Perform NPM security audit based on scan type
    console.log('Starting NPM audit...');
    const auditResults = await performNpmAudit(
      project_data.dependencies,
      scan_type === 'quick' ? ['critical', 'high'] : undefined
    );
    
    // Analyze each active service
    console.log('Analyzing active services...');
    const serviceResults = await Promise.all(
      active_services.map(service => analyzeServiceSecurity(
        service.service_type,
        service.settings,
        scan_type === 'quick' ? ['critical', 'high'] : undefined
      ))
    );

    // Combine findings
    const findings = [
      ...auditResults.findings,
      ...serviceResults.flatMap(result => ({
        id: crypto.randomUUID(),
        name: `Service Analysis: ${result.service_type}`,
        description: result.description || `Security analysis for ${result.service_type} service`,
        severity: result.severity || 'medium',
        affected_component: result.service_type,
        remediation_steps: result.recommendations || [],
        references: result.references || [],
        discovered_at: new Date().toISOString()
      }))
    ];

    // Calculate severity breakdown
    const severityBreakdown = findings.reduce((acc, finding) => {
      acc[finding.severity] = (acc[finding.severity] || 0) + 1;
      return acc;
    }, {
      critical: 0,
      high: 0,
      medium: 0,
      low: 0
    });

    // Update scan with results
    console.log('Updating scan with results...');
    const { error: updateError } = await supabase
      .from('vulnerability_scans')
      .update({
        status: 'completed',
        end_time: new Date().toISOString(),
        total_vulnerabilities: findings.length,
        severity_breakdown: severityBreakdown,
        findings,
        scan_config: {
          dependencies_checked: true,
          services_analyzed: active_services.map(s => s.service_type),
          scan_type,
          timestamp: new Date().toISOString()
        }
      })
      .eq('id', scan.id);

    if (updateError) {
      console.error('Error updating scan:', updateError);
      throw updateError;
    }

    console.log('Scan completed successfully');

    const result: ScanResult = {
      success: true,
      message: `${scan_type} scan completed successfully`,
      scan_id: scan.id,
      services_analyzed: active_services.map(s => s.service_type)
    };

    return new Response(JSON.stringify(result), { 
      headers: { 
        ...corsHeaders,
        'Content-Type': 'application/json'
      },
      status: 200
    });

  } catch (error) {
    console.error('Error in vulnerability scan:', error);
    
    return new Response(
      JSON.stringify({ 
        error: error.message || 'An error occurred during the scan'
      }),
      { 
        status: 500,
        headers: { 
          ...corsHeaders,
          'Content-Type': 'application/json'
        }
      }
    );
  }
});