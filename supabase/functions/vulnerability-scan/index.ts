import { serve } from 'https://deno.land/std@0.168.0/http/server.ts'
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.7.1'
import { ZAPClient } from 'https://deno.land/x/zap_client@1.0.0/mod.ts'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

interface ScanRequest {
  target_url?: string;
  scan_type: string;
  user_id: string;
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  try {
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    )

    // Get request body
    const { target_url, scan_type, user_id } = await req.json() as ScanRequest

    if (!user_id) {
      throw new Error('User ID is required')
    }

    // Initialize ZAP client
    const zapClient = new ZAPClient({
      apiKey: Deno.env.get('ZAP_API_KEY') ?? '',
      proxy: Deno.env.get('ZAP_PROXY_URL') ?? 'http://localhost:8080',
    })

    // Start scan
    const startTime = new Date()
    const scanId = await zapClient.startScan(target_url || '')
    
    // Create scan record
    const { data: scan, error: insertError } = await supabaseClient
      .from('vulnerability_scans')
      .insert({
        user_id,
        scan_type,
        target_url,
        status: 'in_progress',
        start_time: startTime.toISOString(),
        scan_engine: 'owasp_zap',
        scan_parameters: {
          scanId,
          target_url,
        },
      })
      .select()
      .single()

    if (insertError) {
      throw insertError
    }

    // Start monitoring scan progress
    const scanResults = await zapClient.waitForResults(scanId)
    const endTime = new Date()

    // Process and categorize findings
    const findings = scanResults.alerts.map((alert: any) => ({
      id: crypto.randomUUID(),
      name: alert.name,
      description: alert.description,
      severity: alert.risk.toLowerCase(),
      cve_id: alert.cweId ? `CWE-${alert.cweId}` : undefined,
      affected_component: alert.url,
      remediation_steps: [alert.solution],
      references: [alert.reference],
      discovered_at: startTime.toISOString(),
    }))

    // Calculate severity breakdown
    const severityBreakdown = findings.reduce((acc: any, finding: any) => {
      acc[finding.severity] = (acc[finding.severity] || 0) + 1
      return acc
    }, {
      critical: 0,
      high: 0,
      medium: 0,
      low: 0,
    })

    // Update scan with results
    const { error: updateError } = await supabaseClient
      .from('vulnerability_scans')
      .update({
        status: 'completed',
        end_time: endTime.toISOString(),
        scan_duration: endTime.getTime() - startTime.getTime(),
        total_vulnerabilities: findings.length,
        severity_breakdown: severityBreakdown,
        findings,
      })
      .eq('id', scan.id)

    if (updateError) {
      throw updateError
    }

    return new Response(
      JSON.stringify({ message: 'Scan completed successfully', scan }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    )
  } catch (error) {
    console.error('Error:', error)
    return new Response(
      JSON.stringify({ error: error.message }),
      { 
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    )
  }
})