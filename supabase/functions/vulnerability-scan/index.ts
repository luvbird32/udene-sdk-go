import { serve } from "https://deno.land/std@0.177.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.39.3";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface ScanRequest {
  target_url?: string;
  scan_type: string;
  user_id: string;
}

serve(async (req) => {
  try {
    // Handle CORS preflight requests
    if (req.method === 'OPTIONS') {
      return new Response(null, { headers: corsHeaders });
    }

    console.log('Starting vulnerability scan...');
    
    // Initialize Supabase client
    const supabaseUrl = Deno.env.get('SUPABASE_URL');
    const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');

    if (!supabaseUrl || !supabaseKey) {
      console.error('Missing Supabase configuration');
      throw new Error('Missing Supabase configuration');
    }

    const supabaseClient = createClient(supabaseUrl, supabaseKey);

    // Parse request body
    const requestBody = await req.json().catch(error => {
      console.error('Error parsing request body:', error);
      throw new Error('Invalid request body');
    });

    const { target_url, scan_type, user_id }: ScanRequest = requestBody;

    if (!user_id) {
      console.error('Missing user_id in request');
      throw new Error('User ID is required');
    }

    console.log(`Starting scan for user ${user_id}, type: ${scan_type}, target: ${target_url}`);

    // Verify user exists and has permission
    const { data: userExists, error: userError } = await supabaseClient
      .from('profiles')
      .select('id')
      .eq('id', user_id)
      .single();

    if (userError || !userExists) {
      console.error('User verification failed:', userError);
      throw new Error('User not found or unauthorized');
    }

    // Create initial scan record
    const { data: scan, error: insertError } = await supabaseClient
      .from('vulnerability_scans')
      .insert({
        user_id,
        scan_type: scan_type || 'comprehensive',
        target_url,
        status: 'in_progress',
        start_time: new Date().toISOString(),
        total_vulnerabilities: 0,
        severity_breakdown: {
          critical: 0,
          high: 0,
          medium: 0,
          low: 0,
        },
        findings: [],
        scan_config: {
          scan_depth: 'full',
          include_dependencies: true,
          timeout: 300,
          max_urls: 1000,
        }
      })
      .select()
      .single();

    if (insertError) {
      console.error('Error creating scan record:', insertError);
      throw insertError;
    }

    console.log('Scan record created:', scan);

    // Simulate finding some vulnerabilities
    const mockFindings = [
      {
        id: crypto.randomUUID(),
        name: "Cross-Site Scripting (XSS)",
        description: "Potential XSS vulnerability detected in input handling",
        severity: "high",
        affected_component: "User Input Forms",
        remediation_steps: [
          "Implement input validation",
          "Use content security policy",
          "Sanitize user input"
        ],
        references: [
          "https://owasp.org/www-community/attacks/xss/",
        ],
        discovered_at: new Date().toISOString()
      },
      {
        id: crypto.randomUUID(),
        name: "SQL Injection Risk",
        description: "Possible SQL injection vulnerability in database queries",
        severity: "critical",
        affected_component: "Database Layer",
        remediation_steps: [
          "Use parameterized queries",
          "Implement input validation",
          "Update database access layer"
        ],
        references: [
          "https://owasp.org/www-community/attacks/SQL_Injection",
        ],
        discovered_at: new Date().toISOString()
      }
    ];

    // Update scan with findings
    const { error: updateError } = await supabaseClient
      .from('vulnerability_scans')
      .update({
        status: 'completed',
        end_time: new Date().toISOString(),
        total_vulnerabilities: mockFindings.length,
        severity_breakdown: {
          critical: 1,
          high: 1,
          medium: 0,
          low: 0,
        },
        findings: mockFindings
      })
      .eq('id', scan.id);

    if (updateError) {
      console.error('Error updating scan record:', updateError);
      throw updateError;
    }

    console.log('Scan completed successfully');

    return new Response(
      JSON.stringify({ 
        message: 'Scan completed successfully', 
        scan_id: scan.id 
      }),
      { 
        headers: { 
          ...corsHeaders, 
          'Content-Type': 'application/json' 
        } 
      }
    );

  } catch (error) {
    console.error('Error in vulnerability scan:', error);
    return new Response(
      JSON.stringify({ 
        error: error.message || 'An error occurred during the scan' 
      }),
      { 
        status: 500,
        headers: { 
          ...corsHeaders, 
          'Content-Type': 'application/json' 
        }
      }
    );
  }
});