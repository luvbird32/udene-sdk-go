import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    const { user_id, scan_id, scan_type } = await req.json();
    
    if (!user_id || !scan_id) {
      throw new Error('User ID and scan ID are required');
    }

    // Create Supabase client
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    );

    // Simulate scanning process
    const findings = [];
    const severityBreakdown = { critical: 0, high: 0, medium: 0, low: 0 };
    
    // Add some sample findings (in a real implementation, this would be actual scan results)
    const sampleVulnerabilities = [
      {
        id: crypto.randomUUID(),
        name: "Outdated Dependency",
        description: "Using an outdated package version with known vulnerabilities",
        severity: "high",
        affected_component: "react",
        remediation_steps: ["Update to the latest version"],
        references: ["https://example.com/vuln-db/123"],
        discovered_at: new Date().toISOString()
      },
      {
        id: crypto.randomUUID(),
        name: "Insecure Configuration",
        description: "Security-related configuration issue detected",
        severity: "medium",
        affected_component: "config",
        remediation_steps: ["Review and update security settings"],
        references: ["https://example.com/vuln-db/456"],
        discovered_at: new Date().toISOString()
      }
    ];

    findings.push(...sampleVulnerabilities);
    
    // Update severity breakdown
    findings.forEach(finding => {
      severityBreakdown[finding.severity as keyof typeof severityBreakdown]++;
    });

    // Update scan record with results
    const { error: updateError } = await supabaseClient
      .from('vulnerability_scans')
      .update({
        status: 'completed',
        end_time: new Date().toISOString(),
        total_vulnerabilities: findings.length,
        severity_breakdown: severityBreakdown,
        findings: findings,
        scan_duration: '30 seconds'
      })
      .eq('id', scan_id);

    if (updateError) {
      console.error('Error updating scan results:', updateError);
      throw updateError;
    }

    return new Response(
      JSON.stringify({ success: true, findings }),
      { 
        headers: { 
          ...corsHeaders,
          'Content-Type': 'application/json'
        },
        status: 200 
      }
    );

  } catch (error) {
    console.error('Error during vulnerability scan:', error);
    return new Response(
      JSON.stringify({ 
        error: error.message || 'Internal server error',
        details: error
      }),
      { 
        headers: { 
          ...corsHeaders,
          'Content-Type': 'application/json'
        },
        status: 500
      }
    );
  }
});