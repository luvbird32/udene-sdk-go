import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";
import { performNpmAudit } from "./services/npmAuditService.ts";
import { analyzeServiceSecurity } from "./services/serviceAnalyzer.ts";
import { ScanResult } from "./types.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

async function getActiveServices(supabase: any, userId: string): Promise<string[]> {
  const { data: services, error } = await supabase
    .from('client_services')
    .select('service_type')
    .eq('user_id', userId)
    .eq('is_active', true);

  if (error) throw error;
  return services.map((s: any) => s.service_type);
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const supabaseUrl = Deno.env.get('SUPABASE_URL');
    const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');

    if (!supabaseUrl || !supabaseKey) {
      throw new Error('Missing Supabase configuration');
    }

    const supabase = createClient(supabaseUrl, supabaseKey);
    
    const { user_id, scan_type = 'deep', project_data } = await req.json();
    
    if (!user_id) {
      throw new Error('User ID is required');
    }

    console.log(`Starting deep vulnerability scan for user ${user_id}`);

    // Get active services for the user
    const activeServices = await getActiveServices(supabase, user_id);
    console.log('Active services:', activeServices);

    // Create initial scan record
    const { data: scan, error: insertError } = await supabase
      .from('vulnerability_scans')
      .insert({
        user_id,
        scan_type,
        status: 'in_progress',
        start_time: new Date().toISOString(),
        total_vulnerabilities: 0,
        severity_breakdown: {
          critical: 0,
          high: 0,
          medium: 0,
          low: 0
        },
        findings: []
      })
      .select()
      .single();

    if (insertError) {
      console.error('Error creating scan:', insertError);
      throw insertError;
    }

    // Perform NPM security audit
    const auditResults = await performNpmAudit(project_data.dependencies);
    
    // Analyze each active service
    const serviceResults = await Promise.all(
      activeServices.map(service => analyzeServiceSecurity(service, project_data))
    );

    // Combine findings from both dependency audit and service analysis
    const findings = [
      ...auditResults.findings,
      ...serviceResults.flatMap(service => ({
        id: crypto.randomUUID(),
        name: `Service Analysis: ${service.service_type}`,
        description: `Security analysis for ${service.service_type} service`,
        severity: service.vulnerabilities.length > 0 ? 'medium' : 'low',
        affected_component: service.service_type,
        remediation_steps: service.recommendations,
        references: [],
        discovered_at: new Date().toISOString()
      }))
    ];

    // Calculate total severity breakdown
    const severityBreakdown = findings.reduce((acc, finding) => {
      acc[finding.severity] = (acc[finding.severity] || 0) + 1;
      return acc;
    }, {
      critical: 0,
      high: 0,
      medium: 0,
      low: 0
    });

    // Update scan with results
    const { error: updateError } = await supabase
      .from('vulnerability_scans')
      .update({
        status: 'completed',
        end_time: new Date().toISOString(),
        total_vulnerabilities: findings.length,
        severity_breakdown: severityBreakdown,
        findings,
        scan_config: {
          dependencies_checked: true,
          services_analyzed: activeServices,
          timestamp: new Date().toISOString()
        }
      })
      .eq('id', scan.id);

    if (updateError) {
      console.error('Error updating scan:', updateError);
      throw updateError;
    }

    const result: ScanResult = {
      success: true,
      message: 'Deep scan completed successfully',
      scan_id: scan.id,
      services_analyzed: activeServices
    };

    return new Response(JSON.stringify(result), { 
      headers: { 
        ...corsHeaders,
        'Content-Type': 'application/json'
      },
      status: 200
    });

  } catch (error) {
    console.error('Error in vulnerability scan:', error);
    
    return new Response(
      JSON.stringify({ 
        error: error.message || 'An error occurred during the scan'
      }),
      { 
        status: 500,
        headers: { 
          ...corsHeaders,
          'Content-Type': 'application/json'
        }
      }
    );
  }
});