import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const supabaseUrl = Deno.env.get('SUPABASE_URL');
    const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');

    if (!supabaseUrl || !supabaseKey) {
      throw new Error('Missing Supabase configuration');
    }

    const supabase = createClient(supabaseUrl, supabaseKey);
    
    const { user_id, scan_type = 'quick', project_data, active_services } = await req.json();
    
    if (!user_id) {
      throw new Error('User ID is required');
    }

    console.log(`Starting ${scan_type} vulnerability scan for user ${user_id}`);
    console.log('Active services:', active_services);

    // Create initial scan record
    const { data: scan, error: insertError } = await supabase
      .from('vulnerability_scans')
      .insert({
        user_id,
        scan_type,
        status: 'in_progress',
        start_time: new Date().toISOString(),
        total_vulnerabilities: 0,
        severity_breakdown: {
          critical: 0,
          high: 0,
          medium: 0,
          low: 0
        },
        findings: []
      })
      .select()
      .single();

    if (insertError) {
      console.error('Error creating scan:', insertError);
      throw insertError;
    }

    // Analyze dependencies
    const dependencies = project_data?.dependencies || {};
    const findings = [];
    let severityBreakdown = {
      critical: 0,
      high: 0,
      medium: 0,
      low: 0
    };

    // Simulate dependency analysis
    for (const [name, version] of Object.entries(dependencies)) {
      if (Math.random() > 0.7) { // Simulate finding vulnerabilities
        const severity = Math.random() > 0.5 ? 'high' : 'medium';
        findings.push({
          id: crypto.randomUUID(),
          name: `${name} Vulnerability`,
          description: `Potential security issue in ${name}@${version}`,
          severity,
          affected_component: name,
          remediation_steps: [`Update ${name} to latest version`],
          references: [`https://npmjs.com/package/${name}`],
          discovered_at: new Date().toISOString()
        });
        severityBreakdown[severity]++;
      }
    }

    // Update scan with results
    const { error: updateError } = await supabase
      .from('vulnerability_scans')
      .update({
        status: 'completed',
        end_time: new Date().toISOString(),
        total_vulnerabilities: findings.length,
        severity_breakdown: severityBreakdown,
        findings,
        scan_config: {
          dependencies_checked: true,
          services_analyzed: active_services.map(s => s.service_type),
          scan_type,
          timestamp: new Date().toISOString()
        }
      })
      .eq('id', scan.id);

    if (updateError) {
      console.error('Error updating scan:', updateError);
      throw updateError;
    }

    console.log('Scan completed successfully');

    return new Response(
      JSON.stringify({
        success: true,
        message: `${scan_type} scan completed successfully`,
        scan_id: scan.id
      }),
      { 
        headers: { 
          ...corsHeaders,
          'Content-Type': 'application/json'
        },
        status: 200
      }
    );

  } catch (error) {
    console.error('Error in vulnerability scan:', error);
    
    return new Response(
      JSON.stringify({ 
        error: error.message || 'An error occurred during the scan'
      }),
      { 
        status: 500,
        headers: { 
          ...corsHeaders,
          'Content-Type': 'application/json'
        }
      }
    );
  }
});