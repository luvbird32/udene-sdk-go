import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";
import { generateDeviceFingerprint } from "./services/deviceFingerprint.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    const { user_id, scan_id, scan_type } = await req.json();
    
    if (!user_id || !scan_id) {
      throw new Error('User ID and scan ID are required');
    }

    console.log('Starting vulnerability scan for user:', user_id, 'scan:', scan_id);

    // Create Supabase client
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    );

    // Generate device fingerprint for analysis
    const deviceInfo = await generateDeviceFingerprint();
    console.log('Generated device fingerprint:', deviceInfo);

    // Simulate scanning process with actual device info
    const findings = [];
    const severityBreakdown = { critical: 0, high: 0, medium: 0, low: 0 };
    
    // Add device-related findings
    if (deviceInfo.browser_info) {
      const browserVuln = {
        id: crypto.randomUUID(),
        name: "Browser Configuration Check",
        description: "Analysis of browser security settings and configurations",
        severity: "medium",
        affected_component: "browser",
        remediation_steps: ["Update browser to latest version", "Enable security features"],
        references: ["https://example.com/browser-security"],
        discovered_at: new Date().toISOString()
      };
      findings.push(browserVuln);
      severityBreakdown.medium++;
    }

    // Add system-related findings
    if (deviceInfo.hardware_info) {
      const systemVuln = {
        id: crypto.randomUUID(),
        name: "System Security Analysis",
        description: "Review of system security configurations",
        severity: "low",
        affected_component: "system",
        remediation_steps: ["Update system settings", "Review security configurations"],
        references: ["https://example.com/system-security"],
        discovered_at: new Date().toISOString()
      };
      findings.push(systemVuln);
      severityBreakdown.low++;
    }

    // Add network-related findings
    if (deviceInfo.network_info) {
      const networkVuln = {
        id: crypto.randomUUID(),
        name: "Network Security Check",
        description: "Analysis of network connection security",
        severity: "high",
        affected_component: "network",
        remediation_steps: ["Use secure connection", "Enable network encryption"],
        references: ["https://example.com/network-security"],
        discovered_at: new Date().toISOString()
      };
      findings.push(networkVuln);
      severityBreakdown.high++;
    }

    // Update scan record with results
    const { error: updateError } = await supabaseClient
      .from('vulnerability_scans')
      .update({
        status: 'completed',
        end_time: new Date().toISOString(),
        total_vulnerabilities: findings.length,
        severity_breakdown: severityBreakdown,
        findings: findings,
        scan_duration: '30 seconds',
        client_system_info: deviceInfo
      })
      .eq('id', scan_id);

    if (updateError) {
      console.error('Error updating scan results:', updateError);
      throw updateError;
    }

    console.log('Scan completed successfully:', { findings, severityBreakdown });

    return new Response(
      JSON.stringify({ 
        success: true, 
        findings,
        severityBreakdown 
      }),
      { 
        headers: { 
          ...corsHeaders,
          'Content-Type': 'application/json'
        },
        status: 200 
      }
    );

  } catch (error) {
    console.error('Error during vulnerability scan:', error);
    return new Response(
      JSON.stringify({ 
        error: error.message || 'Internal server error',
        details: error
      }),
      { 
        headers: { 
          ...corsHeaders,
          'Content-Type': 'application/json'
        },
        status: 500
      }
    );
  }
});