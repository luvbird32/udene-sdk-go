import { serve } from 'https://deno.land/std@0.168.0/http/server.ts'
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  try {
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    )

    // Parse request body
    const { user_id, scan_type, target_url } = await req.json()
    
    console.log('Starting vulnerability scan:', { user_id, scan_type, target_url })

    // Create new scan record
    const { data: scan, error: insertError } = await supabaseClient
      .from('vulnerability_scans')
      .insert({
        user_id,
        scan_type,
        target_url,
        status: 'in_progress',
        severity_breakdown: { low: 0, medium: 0, high: 0, critical: 0 },
        findings: []
      })
      .select()
      .single()

    if (insertError) {
      console.error('Error creating scan:', insertError)
      throw insertError
    }

    console.log('Scan created successfully:', scan)

    return new Response(
      JSON.stringify({ message: 'Scan initiated', scan }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200 
      }
    )

  } catch (error) {
    console.error('Error in vulnerability scan:', error)
    return new Response(
      JSON.stringify({ error: error.message }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 400
      }
    )
  }
})