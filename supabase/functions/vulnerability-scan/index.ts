import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';
import { orchestrateScan } from './services/scanOrchestrator.ts';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

Deno.serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? '',
      {
        auth: {
          autoRefreshToken: false,
          persistSession: false,
        },
      }
    );

    const authHeader = req.headers.get('Authorization')?.split('Bearer ')[1];
    if (!authHeader) throw new Error('No authorization header');

    const { data: { user }, error: userError } = await supabaseClient.auth.getUser(authHeader);
    if (userError || !user) throw new Error('Invalid user token');

    const { data: profile, error: profileError } = await supabaseClient
      .from('profiles')
      .select('role')
      .eq('id', user.id)
      .single();

    if (profileError) throw new Error('Error verifying admin status');
    if (!profile || profile.role !== 'admin') {
      throw new Error('Unauthorized: Admin access required');
    }

    const scanResult = await orchestrateScan(supabaseClient, user.id);

    // Create scan record
    const { data: scan, error: scanError } = await supabaseClient
      .from('vulnerability_scans')
      .insert({
        user_id: user.id,
        scan_type: 'comprehensive',
        status: 'completed',
        total_vulnerabilities: scanResult.totalVulnerabilities,
        severity_breakdown: scanResult.severityBreakdown,
        findings: scanResult.findings,
        scan_duration: `${scanResult.scanDuration} milliseconds`
      })
      .select()
      .single();

    if (scanError) throw scanError;

    return new Response(
      JSON.stringify({
        scan_id: scan.id,
        ...scanResult,
        scan_timestamp: new Date().toISOString()
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200,
      },
    );

  } catch (error) {
    console.error('Error in vulnerability scan:', error);
    return new Response(
      JSON.stringify({
        error: error.message,
        details: error
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 400,
      },
    );
  }
});