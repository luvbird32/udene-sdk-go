import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";
import { analyzeDependencies } from "./services/dependencyScanner.ts";
import { analyzeServices } from "./services/serviceScanner.ts";
import { ScanResult } from "./types.ts";

// Define CORS headers
const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    console.log('Starting vulnerability scan...');
    const { user_id, scan_type, active_services, project_data } = await req.json();
    
    if (!user_id) {
      throw new Error('User ID is required');
    }

    console.log('Scan parameters:', { user_id, scan_type, active_services });

    const startTime = Date.now();
    const isDeepScan = scan_type === 'deep';

    // Create Supabase client
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    );

    // Create initial scan record
    const { data: scanRecord, error: insertError } = await supabaseClient
      .from('vulnerability_scans')
      .insert({
        user_id,
        scan_type,
        status: 'in_progress',
        start_time: new Date().toISOString(),
      })
      .select()
      .single();

    if (insertError) {
      console.error('Error creating scan record:', insertError);
      throw insertError;
    }

    // Analyze dependencies
    console.log('Analyzing dependencies...');
    const dependencyResults = await analyzeDependencies(
      project_data?.dependencies || {},
      isDeepScan
    );

    // Analyze services
    console.log('Analyzing services...');
    const serviceResults = await analyzeServices(
      active_services || [],
      isDeepScan
    );

    // Combine findings
    const allFindings = [
      ...dependencyResults.flatMap(r => r.vulnerabilities),
      ...serviceResults.flatMap(r => r.findings)
    ];

    // Calculate severity breakdown
    const severityBreakdown = allFindings.reduce((acc, finding) => {
      acc[finding.severity]++;
      return acc;
    }, { critical: 0, high: 0, medium: 0, low: 0 });

    const scanResult: ScanResult = {
      totalVulnerabilities: allFindings.length,
      severityBreakdown,
      findings: allFindings,
      scanDuration: Date.now() - startTime
    };

    // Update scan record with results
    const { error: updateError } = await supabaseClient
      .from('vulnerability_scans')
      .update({
        status: 'completed',
        end_time: new Date().toISOString(),
        total_vulnerabilities: scanResult.totalVulnerabilities,
        severity_breakdown: scanResult.severityBreakdown,
        findings: scanResult.findings,
        scan_duration: `${scanResult.scanDuration} milliseconds`
      })
      .eq('id', scanRecord.id);

    if (updateError) {
      console.error('Error updating scan results:', updateError);
      throw updateError;
    }

    console.log('Scan completed successfully');
    return new Response(
      JSON.stringify(scanResult),
      { 
        headers: { 
          ...corsHeaders,
          'Content-Type': 'application/json'
        },
        status: 200 
      }
    );

  } catch (error) {
    console.error('Error during vulnerability scan:', error);
    return new Response(
      JSON.stringify({ 
        error: error.message || 'Internal server error',
        details: error
      }),
      { 
        headers: { 
          ...corsHeaders,
          'Content-Type': 'application/json'
        },
        status: 500
      }
    );
  }
});