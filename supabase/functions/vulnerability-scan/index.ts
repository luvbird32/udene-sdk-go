import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    const { user_id, scan_id } = await req.json();
    
    if (!user_id || !scan_id) {
      throw new Error('User ID and scan ID are required');
    }

    console.log('Starting comprehensive security scan for user:', user_id);

    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    );

    // 1. Analyze account patterns
    const { data: accountPatterns } = await supabaseClient
      .from('user_creation_patterns')
      .select('*')
      .eq('user_ids', user_id)
      .single();

    // 2. Get device fingerprints
    const { data: deviceFingerprints } = await supabaseClient
      .from('device_fingerprints')
      .select('*')
      .eq('user_id', user_id);

    // 3. Check email reputation
    const { data: emailReputation } = await supabaseClient
      .from('email_reputation')
      .select('*')
      .eq('email', user_id)
      .single();

    // 4. Analyze user behavior patterns
    const { data: userActivities } = await supabaseClient
      .from('user_activities')
      .select('*')
      .eq('profile_id', user_id)
      .order('created_at', { ascending: false })
      .limit(100);

    // 5. Check for suspicious IP patterns
    const { data: deviceHistory } = await supabaseClient
      .from('device_fingerprint_history')
      .select('*')
      .eq('device_fingerprint_id', deviceFingerprints?.[0]?.id);

    // Analyze findings and calculate risk scores
    const findings = [];
    const severityBreakdown = { critical: 0, high: 0, medium: 0, low: 0 };

    // Check for multiple accounts from same IP
    if (accountPatterns?.user_count > 1) {
      findings.push({
        name: "Multiple Accounts Detection",
        description: "Multiple accounts detected from same IP address",
        severity: "high",
        affected_component: "account",
        details: {
          account_count: accountPatterns.user_count,
          ip_address: accountPatterns.ip_address,
          first_creation: accountPatterns.first_creation
        }
      });
      severityBreakdown.high++;
    }

    // Analyze device fingerprints
    if (deviceFingerprints && deviceFingerprints.length > 0) {
      const suspiciousDevices = deviceFingerprints.filter(d => d.is_suspicious);
      if (suspiciousDevices.length > 0) {
        findings.push({
          name: "Suspicious Device Patterns",
          description: "Suspicious device fingerprints detected",
          severity: "high",
          affected_component: "device",
          details: {
            suspicious_count: suspiciousDevices.length,
            risk_scores: suspiciousDevices.map(d => d.risk_score)
          }
        });
        severityBreakdown.high++;
      }
    }

    // Check email reputation
    if (emailReputation?.risk_score > 70) {
      findings.push({
        name: "High Risk Email Pattern",
        description: "Email associated with suspicious activities",
        severity: "critical",
        affected_component: "email",
        details: {
          risk_score: emailReputation.risk_score,
          fraud_flags: emailReputation.fraud_flags
        }
      });
      severityBreakdown.critical++;
    }

    // Analyze user behavior
    if (userActivities && userActivities.length > 0) {
      const suspiciousActivities = userActivities.filter(a => 
        a.metadata?.risk_score > 70 || 
        a.metadata?.suspicious_pattern
      );

      if (suspiciousActivities.length > 0) {
        findings.push({
          name: "Suspicious User Behavior",
          description: "Unusual activity patterns detected",
          severity: "medium",
          affected_component: "behavior",
          details: {
            suspicious_count: suspiciousActivities.length,
            activity_types: suspiciousActivities.map(a => a.activity_type)
          }
        });
        severityBreakdown.medium++;
      }
    }

    // Update scan record with results
    const { error: updateError } = await supabaseClient
      .from('vulnerability_scans')
      .update({
        status: 'completed',
        end_time: new Date().toISOString(),
        total_vulnerabilities: findings.length,
        severity_breakdown: severityBreakdown,
        findings: findings,
        scan_duration: '30 seconds',
        account_correlation: {
          ip_clusters: accountPatterns?.ip_address ? [accountPatterns.ip_address] : [],
          email_patterns: emailReputation?.fraud_flags || [],
          device_clusters: deviceFingerprints?.map(d => d.fingerprint_hash) || [],
          duplicate_accounts: accountPatterns?.user_ids || []
        },
        service_scan_results: {
          ip_analysis: accountPatterns,
          email_verification: emailReputation,
          behavioral_analysis: suspiciousActivities?.length || 0,
          device_fingerprinting: deviceFingerprints?.length || 0
        }
      })
      .eq('id', scan_id);

    if (updateError) {
      console.error('Error updating scan results:', updateError);
      throw updateError;
    }

    console.log('Scan completed successfully:', { 
      findings, 
      severityBreakdown 
    });

    return new Response(
      JSON.stringify({ 
        success: true, 
        findings,
        severityBreakdown 
      }),
      { 
        headers: { 
          ...corsHeaders,
          'Content-Type': 'application/json'
        },
        status: 200 
      }
    );

  } catch (error) {
    console.error('Error during vulnerability scan:', error);
    return new Response(
      JSON.stringify({ 
        error: error.message || 'Internal server error',
        details: error
      }),
      { 
        headers: { 
          ...corsHeaders,
          'Content-Type': 'application/json'
        },
        status: 500
      }
    );
  }
});