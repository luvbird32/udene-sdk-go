import { serve } from 'https://deno.land/std@0.168.0/http/server.ts'
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.7.1'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

interface ScanRequest {
  target_url?: string;
  scan_type: string;
  user_id: string;
}

interface VulnerabilityFinding {
  id: string;
  name: string;
  description: string;
  severity: 'critical' | 'high' | 'medium' | 'low';
  cve_id?: string;
  affected_component: string;
  remediation_steps: string[];
  references: string[];
  discovered_at: string;
}

async function performSecurityScan(targetUrl: string): Promise<VulnerabilityFinding[]> {
  // Simulated security checks
  const findings: VulnerabilityFinding[] = [];
  
  // Example check: Insecure HTTP
  if (!targetUrl.startsWith('https://')) {
    findings.push({
      id: crypto.randomUUID(),
      name: 'Insecure HTTP Protocol',
      description: 'The application is using HTTP instead of HTTPS, which could expose sensitive data.',
      severity: 'high',
      affected_component: targetUrl,
      remediation_steps: ['Enable HTTPS', 'Redirect all HTTP traffic to HTTPS'],
      references: ['https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure'],
      discovered_at: new Date().toISOString()
    });
  }

  // Add more security checks here
  
  return findings;
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  try {
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    )

    // Get request body
    const { target_url, scan_type, user_id } = await req.json() as ScanRequest

    if (!user_id) {
      throw new Error('User ID is required')
    }

    console.log('Starting security scan for:', target_url);
    
    // Start scan
    const startTime = new Date()
    const findings = await performSecurityScan(target_url || '')
    const endTime = new Date()

    // Calculate severity breakdown
    const severityBreakdown = findings.reduce((acc, finding) => {
      acc[finding.severity] = (acc[finding.severity] || 0) + 1
      return acc
    }, {
      critical: 0,
      high: 0,
      medium: 0,
      low: 0,
    })

    // Create scan record
    const { data: scan, error: insertError } = await supabaseClient
      .from('vulnerability_scans')
      .insert({
        user_id,
        scan_type,
        target_url,
        status: 'completed',
        start_time: startTime.toISOString(),
        end_time: endTime.toISOString(),
        scan_duration: endTime.getTime() - startTime.getTime(),
        total_vulnerabilities: findings.length,
        severity_breakdown: severityBreakdown,
        findings,
      })
      .select()
      .single()

    if (insertError) {
      throw insertError
    }

    return new Response(
      JSON.stringify({ message: 'Scan completed successfully', scan }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    )
  } catch (error) {
    console.error('Error:', error)
    return new Response(
      JSON.stringify({ error: error.message }),
      { 
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    )
  }
})