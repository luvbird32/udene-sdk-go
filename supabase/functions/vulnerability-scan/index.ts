import { serve } from "https://deno.land/std@0.190.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface ScanRequest {
  target_url?: string;
  scan_type: string;
  user_id: string;
}

interface VulnerabilityFinding {
  id: string;
  name: string;
  description: string;
  severity: 'critical' | 'high' | 'medium' | 'low';
  cve_id?: string;
  affected_component: string;
  remediation_steps: string[];
  references: string[];
  discovered_at: string;
}

serve(async (req) => {
  try {
    // Handle CORS preflight requests
    if (req.method === 'OPTIONS') {
      return new Response(null, { headers: corsHeaders });
    }

    console.log('Starting vulnerability scan...');
    
    // Initialize Supabase client
    const supabaseUrl = Deno.env.get('SUPABASE_URL');
    const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');

    if (!supabaseUrl || !supabaseKey) {
      throw new Error('Missing Supabase configuration');
    }

    const supabaseClient = createClient(supabaseUrl, supabaseKey);

    // Get request body
    const { target_url, scan_type, user_id }: ScanRequest = await req.json();

    if (!user_id) {
      throw new Error('User ID is required');
    }

    console.log(`Scan requested for user ${user_id}, type: ${scan_type}, target: ${target_url}`);

    // Simulate security checks
    const findings: VulnerabilityFinding[] = [];
    
    // Add a sample finding
    findings.push({
      id: crypto.randomUUID(),
      name: 'Configuration Check',
      description: 'Basic security configuration scan completed',
      severity: 'low',
      affected_component: target_url || 'system',
      remediation_steps: ['Review security settings', 'Update configurations if needed'],
      references: ['https://owasp.org/www-project-web-security-testing-guide/'],
      discovered_at: new Date().toISOString()
    });

    // Calculate severity breakdown
    const severityBreakdown = findings.reduce((acc, finding) => {
      acc[finding.severity] = (acc[finding.severity] || 0) + 1;
      return acc;
    }, {
      critical: 0,
      high: 0,
      medium: 0,
      low: 0,
    });

    // Create scan record
    const { data: scan, error: insertError } = await supabaseClient
      .from('vulnerability_scans')
      .insert({
        user_id,
        scan_type,
        target_url,
        status: 'completed',
        start_time: new Date().toISOString(),
        end_time: new Date().toISOString(),
        total_vulnerabilities: findings.length,
        severity_breakdown: severityBreakdown,
        findings,
      })
      .select()
      .single();

    if (insertError) {
      console.error('Error creating scan record:', insertError);
      throw insertError;
    }

    console.log('Scan completed successfully:', scan);

    return new Response(
      JSON.stringify({ 
        message: 'Scan completed successfully', 
        scan 
      }),
      { 
        headers: { 
          ...corsHeaders, 
          'Content-Type': 'application/json' 
        } 
      }
    );

  } catch (error) {
    console.error('Error in vulnerability scan:', error);
    return new Response(
      JSON.stringify({ 
        error: error.message || 'An error occurred during the scan' 
      }),
      { 
        status: 500,
        headers: { 
          ...corsHeaders, 
          'Content-Type': 'application/json' 
        }
      }
    );
  }
});