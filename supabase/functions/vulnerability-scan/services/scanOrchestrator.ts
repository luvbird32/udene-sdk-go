import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';
import { analyzeDevicePatterns } from './deviceAnalyzer.ts';
import { analyzeUserPatterns } from './userPatternAnalyzer.ts';
import { analyzeEmailPatterns } from './emailAnalyzer.ts';
import { ScanResult, Finding } from '../types';

export async function orchestrateScan(
  supabaseClient: any,
  userId: string
): Promise<ScanResult> {
  const startTime = Date.now();
  
  // Run all analyses in parallel
  const [
    deviceResults,
    userResults,
    emailResults
  ] = await Promise.all([
    analyzeDevicePatterns(supabaseClient, userId),
    analyzeUserPatterns(supabaseClient, userId),
    analyzeEmailPatterns(supabaseClient, userId)
  ]);

  // Combine all findings
  const allFindings: Finding[] = [
    ...deviceResults.findings,
    ...userResults.findings,
    ...emailResults.findings
  ];

  // Calculate severity breakdown
  const severityBreakdown = allFindings.reduce((acc, finding) => {
    acc[finding.severity] = (acc[finding.severity] || 0) + 1;
    return acc;
  }, {
    critical: 0,
    high: 0,
    medium: 0,
    low: 0
  });

  return {
    totalVulnerabilities: allFindings.length,
    severityBreakdown,
    findings: allFindings,
    scanDuration: Date.now() - startTime
  };
}