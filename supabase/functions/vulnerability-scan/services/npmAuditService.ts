import { createClient } from "https://esm.sh/@supabase/supabase-js@2";
import { DependencyAudit, AuditResult } from "../types.ts";

export async function performNpmAudit(
  dependencies: Record<string, string>,
  severityFilter?: string[]
): Promise<AuditResult> {
  try {
    console.log('Starting NPM audit with severity filter:', severityFilter);
    
    // Format dependencies for npm audit
    const packageJson = {
      name: "project-security-audit",
      dependencies
    };

    const response = await fetch("https://registry.npmjs.org/-/npm/v1/security/audits", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(packageJson)
    });

    if (!response.ok) {
      throw new Error(`NPM Audit failed: ${response.statusText}`);
    }

    const auditData = await response.json();
    console.log('NPM audit completed, processing results');
    
    // Transform npm audit results into our standard format
    let findings = Object.values(auditData.advisories || {}).map((advisory: any) => ({
      id: advisory.id,
      name: `${advisory.module_name} Vulnerability`,
      description: advisory.overview,
      severity: advisory.severity,
      cve_id: advisory.cves[0] || null,
      affected_component: advisory.module_name,
      remediation_steps: [advisory.recommendation],
      references: advisory.references,
      discovered_at: new Date().toISOString()
    }));

    // Filter by severity if specified
    if (severityFilter) {
      findings = findings.filter((finding: any) => 
        severityFilter.includes(finding.severity)
      );
    }

    // Calculate severity breakdown
    const severityBreakdown = findings.reduce((acc: any, finding: any) => {
      acc[finding.severity] = (acc[finding.severity] || 0) + 1;
      return acc;
    }, { critical: 0, high: 0, medium: 0, low: 0 });

    console.log('Audit processing complete. Found vulnerabilities:', findings.length);

    return {
      total_vulnerabilities: findings.length,
      severity_breakdown: severityBreakdown,
      findings
    };
  } catch (error) {
    console.error("NPM Audit error:", error);
    throw error;
  }
}