import { ServiceResult, Finding } from "../types";

export async function analyzeDevicePatterns(
  supabaseClient: any,
  userId: string
): Promise<ServiceResult> {
  const { data: devicePatterns, error } = await supabaseClient
    .from('device_fingerprints')
    .select('fingerprint_hash, user_id, browser_info, network_info, hardware_info, risk_score');

  if (error) throw error;

  const findings: Finding[] = [];
  const devicesByFingerprint: Record<string, any[]> = {};

  devicePatterns?.forEach(device => {
    const fingerprint = device.fingerprint_hash;
    if (fingerprint) {
      devicesByFingerprint[fingerprint] = devicesByFingerprint[fingerprint] || [];
      devicesByFingerprint[fingerprint].push(device);
    }
  });

  Object.entries(devicesByFingerprint).forEach(([fingerprint, devices]) => {
    if (devices.length > 1) {
      findings.push({
        name: "Multiple Accounts from Same Device",
        description: `${devices.length} accounts using identical device fingerprint`,
        severity: devices.length > 3 ? "critical" : "high",
        affected_component: "device",
        details: {
          fingerprint,
          account_count: devices.length,
          user_ids: devices.map(d => d.user_id)
        }
      });
    }
  });

  return {
    service_type: 'device_analysis',
    findings
  };
}