import { ScanResult, DependencyAnalysis } from '../types.ts';

export const analyzeDependencies = (
  dependencies: Record<string, string>,
  isDeepScan: boolean
): DependencyAnalysis[] => {
  const results: DependencyAnalysis[] = [];
  const vulnerabilityThreshold = isDeepScan ? 0.5 : 0.7;

  for (const [packageName, version] of Object.entries(dependencies)) {
    const vulnerabilities = analyzePackage(packageName, version, vulnerabilityThreshold);
    if (vulnerabilities.length > 0) {
      results.push({
        packageName,
        currentVersion: version,
        vulnerabilities
      });
    }
  }

  return results;
};

const analyzePackage = (packageName: string, version: string, threshold: number) => {
  // Simulated vulnerability analysis
  const mockVulnerabilities = [];
  const riskScore = Math.random();

  if (riskScore > threshold) {
    mockVulnerabilities.push({
      id: crypto.randomUUID(),
      title: `Security vulnerability in ${packageName}`,
      description: `Potential security issue detected in ${packageName}@${version}`,
      severity: riskScore > 0.8 ? 'critical' : riskScore > 0.7 ? 'high' : 'medium',
      packageName,
      version,
      recommendation: `Update to the latest version or review package usage`,
      references: [`https://example.com/vuln/${packageName}`]
    });
  }

  return mockVulnerabilities;
};