import { ScanResult, DependencyAnalysis } from '../types';

export const analyzeDependencies = (
  dependencies: Record<string, string>,
  scanType: 'quick' | 'deep'
): DependencyAnalysis => {
  const findings = [];
  const severityBreakdown = {
    critical: 0,
    high: 0,
    medium: 0,
    low: 0
  };

  // Thresholds and distributions based on scan type
  const vulnerabilityThreshold = scanType === 'deep' ? 0.5 : 0.7;
  const severityDistribution = scanType === 'deep' 
    ? { critical: 0.2, high: 0.3, medium: 0.3, low: 0.2 }
    : { critical: 0.1, high: 0.2, medium: 0.3, low: 0.4 };

  for (const [name, version] of Object.entries(dependencies)) {
    if (Math.random() > vulnerabilityThreshold) {
      const rand = Math.random();
      let severity;
      
      if (rand < severityDistribution.critical) severity = 'critical';
      else if (rand < severityDistribution.critical + severityDistribution.high) severity = 'high';
      else if (rand < severityDistribution.critical + severityDistribution.high + severityDistribution.medium) severity = 'medium';
      else severity = 'low';

      const finding = {
        id: crypto.randomUUID(),
        name: `${name} Vulnerability`,
        description: scanType === 'deep'
          ? `Comprehensive security analysis revealed potential vulnerabilities in ${name}@${version}. This may include known CVEs, dependency chain vulnerabilities, and configuration issues.`
          : `Potential security issue in ${name}@${version}`,
        severity,
        affected_component: name,
        remediation_steps: [
          `Update ${name} to latest version`,
          ...(scanType === 'deep' ? [
            'Review dependency chain for potential vulnerabilities',
            'Check for security advisories',
            'Consider alternative packages if available'
          ] : [])
        ],
        references: [
          `https://npmjs.com/package/${name}`,
          ...(scanType === 'deep' ? [
            'https://nvd.nist.gov/vuln/search',
            'https://snyk.io/vuln'
          ] : [])
        ],
        discovered_at: new Date().toISOString()
      };

      findings.push(finding);
      severityBreakdown[severity]++;
    }
  }

  return { findings, severityBreakdown };
};