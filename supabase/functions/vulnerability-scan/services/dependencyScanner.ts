import { DependencyResult, Vulnerability } from "../types.ts";

export function analyzeDependencies(
  dependencies: Record<string, string>,
  isDeepScan: boolean
): DependencyResult[] {
  const results: DependencyResult[] = [];
  const vulnerabilityThreshold = isDeepScan ? 0.5 : 0.7;

  for (const [pkg, version] of Object.entries(dependencies)) {
    const vulnerabilities: Vulnerability[] = [];
    
    // Simulated vulnerability check
    const riskScore = Math.random();
    if (riskScore > vulnerabilityThreshold) {
      vulnerabilities.push({
        id: crypto.randomUUID(),
        name: `${pkg} Vulnerability`,
        description: `Potential security issue in ${pkg}@${version}`,
        severity: riskScore > 0.9 ? 'critical' : riskScore > 0.8 ? 'high' : riskScore > 0.6 ? 'medium' : 'low',
        package: pkg,
        version: version,
        fixedVersion: `${parseInt(version) + 1}.0.0`,
        remediation: `Update to the latest version of ${pkg}`,
        references: isDeepScan ? [`https://nvd.nist.gov/vuln/search/results?keyword=${pkg}`] : undefined
      });
    }

    if (vulnerabilities.length > 0) {
      results.push({
        package: pkg,
        vulnerabilities
      });
    }
  }

  return results;
}