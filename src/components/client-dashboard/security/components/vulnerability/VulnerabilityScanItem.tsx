import { useState } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { ChevronDown, ChevronUp, Shield, AlertTriangle, Clock } from "lucide-react";
import { VulnerabilityScan } from "../../types";
import { ScanHeader } from "../shared/ScanHeader";
import { FindingDetails } from "./FindingDetails";
import { SeverityBreakdown } from "./SeverityBreakdown";
import { format } from "date-fns";
import { Badge } from "@/components/ui/badge";
import { DownloadReport } from "./DownloadReport";

interface VulnerabilityScanItemProps {
  scan: VulnerabilityScan;
}

export const VulnerabilityScanItem = ({ scan }: VulnerabilityScanItemProps) => {
  const [isExpanded, setIsExpanded] = useState(false);

  const getStatusColor = (status: string) => {
    switch (status.toLowerCase()) {
      case 'completed':
        return 'bg-green-500/10 text-green-500 border-green-500/20';
      case 'in_progress':
        return 'bg-blue-500/10 text-blue-500 border-blue-500/20';
      case 'failed':
        return 'bg-red-500/10 text-red-500 border-red-500/20';
      default:
        return 'bg-gray-500/10 text-gray-500 border-gray-500/20';
    }
  };

  return (
    <Card className="p-6 space-y-6">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-3">
          <Shield className="h-6 w-6 text-primary" />
          <div>
            <h3 className="font-semibold text-lg">Security Scan Results</h3>
            <p className="text-sm text-muted-foreground">
              {format(new Date(scan.start_time), 'PPp')}
            </p>
          </div>
        </div>
        <div className="flex items-center gap-2">
          <Badge variant="outline" className={getStatusColor(scan.status)}>
            {scan.status}
          </Badge>
          {scan.status === 'completed' && <DownloadReport scan={scan} />}
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="space-y-4">
          <div className="flex items-center gap-2">
            <AlertTriangle className="h-5 w-5 text-warning" />
            <span className="font-medium">Total Vulnerabilities:</span>
            <span className="text-lg">{scan.total_vulnerabilities}</span>
          </div>
          
          <div className="flex items-center gap-2">
            <Clock className="h-5 w-5 text-muted-foreground" />
            <span className="font-medium">Duration:</span>
            <span>{scan.scan_duration || 'N/A'}</span>
          </div>
        </div>

        <SeverityBreakdown 
          breakdown={scan.severity_breakdown}
          total={scan.total_vulnerabilities}
        />
      </div>

      {scan.findings && scan.findings.length > 0 && (
        <>
          <Button
            variant="outline"
            className="w-full"
            onClick={() => setIsExpanded(!isExpanded)}
          >
            {isExpanded ? (
              <ChevronUp className="h-4 w-4 mr-2" />
            ) : (
              <ChevronDown className="h-4 w-4 mr-2" />
            )}
            {isExpanded ? "Hide" : "Show"} Detailed Findings
          </Button>

          {isExpanded && (
            <div className="space-y-4 pt-4">
              {scan.findings.map((finding) => (
                <FindingDetails key={finding.id} finding={finding} />
              ))}
            </div>
          )}
        </>
      )}
    </Card>
  );
};