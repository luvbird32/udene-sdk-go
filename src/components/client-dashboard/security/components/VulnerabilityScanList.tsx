import { Card } from "@/components/ui/card";
import { Loader2 } from "lucide-react";
import { VulnerabilityScanItem } from "./VulnerabilityScanItem";
import { Json } from "@/integrations/supabase/types";
import { VulnerabilityDetail } from "../utils/scanUtils";

interface SeverityBreakdown {
  critical: number;
  high: number;
  medium: number;
  low: number;
}

export interface VulnerabilityScan {
  id: string;
  scan_type: string;
  status: string;
  start_time: string;
  end_time: string | null;
  total_vulnerabilities: number;
  severity_breakdown: SeverityBreakdown;
  findings: Json[];
}

interface VulnerabilityScanListProps {
  scans?: VulnerabilityScan[];
  isLoading: boolean;
}

// Helper function to convert Json to VulnerabilityDetail
const convertJsonToVulnerabilityDetail = (json: Json): VulnerabilityDetail => {
  if (typeof json !== 'object' || !json) {
    throw new Error('Invalid finding format');
  }
  
  return {
    id: String(json.id || ''),
    name: String(json.name || ''),
    description: String(json.description || ''),
    severity: (json.severity as VulnerabilityDetail['severity']) || 'low',
    cve_id: json.cve_id ? String(json.cve_id) : undefined,
    affected_component: String(json.affected_component || ''),
    remediation_steps: Array.isArray(json.remediation_steps) ? json.remediation_steps.map(String) : [],
    references: Array.isArray(json.references) ? json.references.map(String) : [],
    discovered_at: String(json.discovered_at || new Date().toISOString())
  };
};

export const VulnerabilityScanList = ({ scans, isLoading }: VulnerabilityScanListProps) => {
  if (isLoading) {
    return (
      <Card className="p-6 flex justify-center items-center">
        <Loader2 className="h-6 w-6 animate-spin" />
      </Card>
    );
  }

  if (!scans || scans.length === 0) {
    return (
      <Card className="p-6 text-center text-muted-foreground">
        No vulnerability scans found. Start a new scan to check your application security.
      </Card>
    );
  }

  return (
    <div className="space-y-4">
      {scans.map((scan) => {
        // Convert Json findings to VulnerabilityDetail type
        const convertedFindings = scan.findings.map(convertJsonToVulnerabilityDetail);
        return (
          <VulnerabilityScanItem 
            key={scan.id} 
            scan={{
              ...scan,
              findings: convertedFindings
            }} 
          />
        );
      })}
    </div>
  );
};