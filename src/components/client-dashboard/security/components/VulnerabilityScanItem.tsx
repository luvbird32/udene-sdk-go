import { AlertTriangle, Loader2 } from "lucide-react";
import { Card } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { calculateScanProgress } from "../utils/scanUtils";

interface SeverityBreakdown {
  critical: number;
  high: number;
  medium: number;
  low: number;
}

interface VulnerabilityScan {
  id: string;
  scan_type: string;
  status: string;
  start_time: string;
  end_time: string | null;
  total_vulnerabilities: number;
  severity_breakdown: SeverityBreakdown;
}

interface VulnerabilityScanItemProps {
  scan: VulnerabilityScan;
}

export const VulnerabilityScanItem = ({ scan }: VulnerabilityScanItemProps) => {
  return (
    <Card key={scan.id} className="p-4 space-y-4">
      <div className="flex items-start justify-between">
        <div>
          <h4 className="font-medium">
            {scan.scan_type.charAt(0).toUpperCase() + scan.scan_type.slice(1)} Scan
          </h4>
          <p className="text-sm text-muted-foreground">
            Started: {new Date(scan.start_time).toLocaleString()}
          </p>
          {scan.end_time && (
            <p className="text-sm text-muted-foreground">
              Completed: {new Date(scan.end_time).toLocaleString()}
            </p>
          )}
        </div>
        {scan.total_vulnerabilities > 0 && (
          <AlertTriangle className="h-5 w-5 text-yellow-500" />
        )}
      </div>

      <div className="space-y-2">
        <div className="flex justify-between text-sm">
          <span className="flex items-center gap-2">
            Status: {scan.status} 
            {scan.status === 'in_progress' && (
              <Loader2 className="h-4 w-4 animate-spin" />
            )}
          </span>
          <span className="font-medium">
            {scan.total_vulnerabilities} vulnerabilities found
          </span>
        </div>

        <div className="grid grid-cols-2 gap-2 text-sm">
          <div className="flex justify-between">
            <span>Critical:</span>
            <span className="text-red-500 font-medium">
              {scan.severity_breakdown.critical}
            </span>
          </div>
          <div className="flex justify-between">
            <span>High:</span>
            <span className="text-orange-500 font-medium">
              {scan.severity_breakdown.high}
            </span>
          </div>
          <div className="flex justify-between">
            <span>Medium:</span>
            <span className="text-yellow-500 font-medium">
              {scan.severity_breakdown.medium}
            </span>
          </div>
          <div className="flex justify-between">
            <span>Low:</span>
            <span className="text-green-500 font-medium">
              {scan.severity_breakdown.low}
            </span>
          </div>
        </div>

        {scan.status === 'in_progress' && (
          <div className="space-y-1">
            <Progress value={calculateScanProgress(scan.status, scan.end_time)} className="h-2" />
            <p className="text-xs text-muted-foreground text-center">
              Scanning in progress...
            </p>
          </div>
        )}
      </div>
    </Card>
  );
};