import { AlertTriangle, ChevronDown, ChevronUp, Loader2, Shield } from "lucide-react";
import { Card } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { calculateScanProgress } from "../utils/scanUtils";
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { format } from "date-fns";
import { Badge } from "@/components/ui/badge";
import { VulnerabilityDetail } from "../utils/scanUtils";

interface SeverityBreakdown {
  critical: number;
  high: number;
  medium: number;
  low: number;
}

interface VulnerabilityScan {
  id: string;
  scan_type: string;
  status: string;
  start_time: string;
  end_time: string | null;
  total_vulnerabilities: number;
  severity_breakdown: SeverityBreakdown;
  findings: VulnerabilityDetail[];
}

interface VulnerabilityScanItemProps {
  scan: VulnerabilityScan;
}

const getSeverityColor = (severity: string) => {
  switch (severity) {
    case 'critical':
      return 'text-red-500 bg-red-100';
    case 'high':
      return 'text-orange-500 bg-orange-100';
    case 'medium':
      return 'text-yellow-500 bg-yellow-100';
    case 'low':
      return 'text-green-500 bg-green-100';
    default:
      return 'text-gray-500 bg-gray-100';
  }
};

export const VulnerabilityScanItem = ({ scan }: VulnerabilityScanItemProps) => {
  const [isExpanded, setIsExpanded] = useState(false);

  return (
    <Card className="p-4 space-y-4">
      <div className="flex items-start justify-between">
        <div>
          <h4 className="font-medium flex items-center gap-2">
            <Shield className="h-4 w-4 text-primary" />
            {scan.scan_type.charAt(0).toUpperCase() + scan.scan_type.slice(1)} Scan
          </h4>
          <p className="text-sm text-muted-foreground">
            Started: {format(new Date(scan.start_time), 'PPp')}
          </p>
          {scan.end_time && (
            <p className="text-sm text-muted-foreground">
              Completed: {format(new Date(scan.end_time), 'PPp')}
            </p>
          )}
        </div>
        {scan.total_vulnerabilities > 0 && (
          <AlertTriangle className="h-5 w-5 text-yellow-500" />
        )}
      </div>

      <div className="space-y-2">
        <div className="flex justify-between text-sm">
          <span className="flex items-center gap-2">
            Status: {scan.status} 
            {scan.status === 'in_progress' && (
              <Loader2 className="h-4 w-4 animate-spin" />
            )}
          </span>
          <span className="font-medium">
            {scan.total_vulnerabilities} vulnerabilities found
          </span>
        </div>

        <div className="grid grid-cols-2 gap-2 text-sm">
          <div className="flex justify-between">
            <span>Critical:</span>
            <span className="text-red-500 font-medium">
              {scan.severity_breakdown.critical}
            </span>
          </div>
          <div className="flex justify-between">
            <span>High:</span>
            <span className="text-orange-500 font-medium">
              {scan.severity_breakdown.high}
            </span>
          </div>
          <div className="flex justify-between">
            <span>Medium:</span>
            <span className="text-yellow-500 font-medium">
              {scan.severity_breakdown.medium}
            </span>
          </div>
          <div className="flex justify-between">
            <span>Low:</span>
            <span className="text-green-500 font-medium">
              {scan.severity_breakdown.low}
            </span>
          </div>
        </div>

        {scan.status === 'in_progress' && (
          <div className="space-y-1">
            <Progress value={calculateScanProgress(scan.status, scan.end_time)} className="h-2" />
            <p className="text-xs text-muted-foreground text-center">
              Scanning in progress...
            </p>
          </div>
        )}

        {scan.findings && scan.findings.length > 0 && (
          <Button
            variant="outline"
            className="w-full mt-2"
            onClick={() => setIsExpanded(!isExpanded)}
          >
            {isExpanded ? (
              <ChevronUp className="h-4 w-4 mr-2" />
            ) : (
              <ChevronDown className="h-4 w-4 mr-2" />
            )}
            {isExpanded ? "Hide" : "Show"} Detailed Findings
          </Button>
        )}
      </div>

      {isExpanded && scan.findings && (
        <div className="space-y-4 mt-4 border-t pt-4">
          {scan.findings.map((finding) => (
            <div key={finding.id} className="space-y-2 p-4 bg-muted/50 rounded-lg">
              <div className="flex items-center justify-between">
                <h5 className="font-medium">{finding.name}</h5>
                <Badge className={getSeverityColor(finding.severity)}>
                  {finding.severity.toUpperCase()}
                </Badge>
              </div>
              
              {finding.cve_id && (
                <p className="text-sm font-mono bg-muted p-1 rounded">
                  {finding.cve_id}
                </p>
              )}
              
              <p className="text-sm text-muted-foreground">
                {finding.description}
              </p>
              
              <div className="text-sm">
                <p className="font-medium">Affected Component:</p>
                <p className="text-muted-foreground">{finding.affected_component}</p>
              </div>
              
              <div className="text-sm">
                <p className="font-medium">Remediation Steps:</p>
                <ul className="list-disc pl-4 text-muted-foreground">
                  {finding.remediation_steps.map((step, index) => (
                    <li key={index}>{step}</li>
                  ))}
                </ul>
              </div>
              
              <div className="text-sm">
                <p className="font-medium">References:</p>
                <ul className="list-disc pl-4">
                  {finding.references.map((ref, index) => (
                    <li key={index}>
                      <a 
                        href={ref}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="text-primary hover:underline"
                      >
                        {ref}
                      </a>
                    </li>
                  ))}
                </ul>
              </div>
              
              <p className="text-xs text-muted-foreground">
                Discovered: {format(new Date(finding.discovered_at), 'PPp')}
              </p>
            </div>
          ))}
        </div>
      )}
    </Card>
  );
};
