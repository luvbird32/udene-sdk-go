import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { AlertCircle, ExternalLink } from "lucide-react";
import { format } from "date-fns";

interface VulnerabilityDetail {
  id: string;
  name: string;
  description: string;
  severity: 'critical' | 'high' | 'medium' | 'low';
  cve_id?: string;
  affected_component: string;
  remediation_steps: string[];
  references: string[];
  discovered_at: string;
}

interface FindingDetailsProps {
  finding: VulnerabilityDetail;
}

export const FindingDetails = ({ finding }: FindingDetailsProps) => {
  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical':
        return 'bg-red-500/10 text-red-500';
      case 'high':
        return 'bg-orange-500/10 text-orange-500';
      case 'medium':
        return 'bg-yellow-500/10 text-yellow-500';
      case 'low':
        return 'bg-green-500/10 text-green-500';
      default:
        return 'bg-gray-500/10 text-gray-500';
    }
  };

  return (
    <Card className="p-4 space-y-4">
      <div className="flex items-start justify-between">
        <div className="space-y-1">
          <div className="flex items-center gap-2">
            <AlertCircle className="h-4 w-4 text-muted-foreground" />
            <h4 className="font-medium">{finding.name}</h4>
          </div>
          {finding.cve_id && (
            <span className="text-sm text-muted-foreground">
              CVE: {finding.cve_id}
            </span>
          )}
        </div>
        <Badge className={getSeverityColor(finding.severity)}>
          {finding.severity}
        </Badge>
      </div>

      <div className="space-y-2">
        <p className="text-sm text-muted-foreground">{finding.description}</p>
        <p className="text-sm">
          <span className="font-medium">Affected Component:</span> {finding.affected_component}
        </p>
      </div>

      {finding.remediation_steps.length > 0 && (
        <div className="space-y-2">
          <h5 className="text-sm font-medium">Remediation Steps:</h5>
          <ul className="list-disc list-inside text-sm space-y-1">
            {finding.remediation_steps.map((step, index) => (
              <li key={index} className="text-muted-foreground">{step}</li>
            ))}
          </ul>
        </div>
      )}

      {finding.references.length > 0 && (
        <div className="space-y-2">
          <h5 className="text-sm font-medium">References:</h5>
          <ul className="list-none space-y-1">
            {finding.references.map((ref, index) => (
              <li key={index}>
                <a
                  href={ref}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="text-sm text-primary hover:underline flex items-center gap-1"
                >
                  {ref.substring(0, 50)}...
                  <ExternalLink className="h-3 w-3" />
                </a>
              </li>
            ))}
          </ul>
        </div>
      )}

      <div className="text-xs text-muted-foreground">
        Discovered: {format(new Date(finding.discovered_at), 'MMM d, yyyy HH:mm')}
      </div>
    </Card>
  );
};