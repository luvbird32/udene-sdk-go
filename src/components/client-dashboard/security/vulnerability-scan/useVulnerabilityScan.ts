import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useState, useCallback } from 'react';
import { useToast } from '@/hooks/use-toast';
import { ScanConfig, ScanResult } from './types';

export const useVulnerabilityScan = (userId: string) => {
  const [scanProgress, setScanProgress] = useState(0);
  const queryClient = useQueryClient();
  const { toast } = useToast();

  const getClientSystemInfo = useCallback(() => ({
    platform: navigator.platform,
    userAgent: navigator.userAgent,
    language: navigator.language,
    screenResolution: `${window.screen.width}x${window.screen.height}`,
    timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone
  }), []);

  const scanMutation = useMutation({
    mutationFn: async ({ scanType, services }: { scanType: string; services: string[] }) => {
      let progressInterval: NodeJS.Timeout;

      // Start progress simulation
      progressInterval = setInterval(() => {
        setScanProgress(prev => Math.min(prev + 5, 90));
      }, 500);

      const clientSystemInfo = getClientSystemInfo();
      const dependencies = {
        "react": "^18.0.0",
        "typescript": "^4.8.0",
        "tailwindcss": "^3.0.0"
      };

      try {
        const { data, error: functionError } = await supabase.functions.invoke('vulnerability-scan', {
          body: {
            user_id: userId,
            scan_type: scanType,
            active_services: services,
            client_system_info: clientSystemInfo,
            client_dependencies: dependencies,
            client_platform: navigator.platform,
            client_sdk_version: '1.0.0'
          } as ScanConfig
        });
          
        if (functionError) {
          console.error("Function error:", functionError);
          throw functionError;
        }

        setScanProgress(100);
        setTimeout(() => setScanProgress(0), 1000);
        return data;
      } catch (error) {
        toast({
          title: "Scan Failed",
          description: error instanceof Error ? error.message : "An unexpected error occurred",
          variant: "destructive"
        });
        throw error;
      } finally {
        clearInterval(progressInterval);
      }
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['vulnerability-scans'] });
      toast({
        title: "Scan Complete",
        description: "Vulnerability scan completed successfully"
      });
    }
  });

  const scansQuery = useQuery({
    queryKey: ['vulnerability-scans', userId],
    queryFn: async () => {
      const { data, error } = await supabase
        .from('vulnerability_scans')
        .select('*')
        .eq('user_id', userId)
        .order('created_at', { ascending: false })
        .limit(5);

      if (error) throw error;
      return data as ScanResult[];
    }
  });

  return {
    scanProgress,
    scanMutation,
    scansQuery,
    isScanning: scanMutation.isPending,
    scanError: scanMutation.error,
    recentScans: scansQuery.data || [],
    isLoadingScans: scansQuery.isLoading,
    scansError: scansQuery.error
  };
};