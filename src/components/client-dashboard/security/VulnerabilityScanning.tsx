import { useQuery } from "@tanstack/react-query";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";
import { useAuth } from "@/hooks/useAuth";
import { VulnerabilityScanList } from "./components/VulnerabilityScanList";
import { VulnerabilityScanHeader } from "./components/VulnerabilityScanHeader";
import { generateMockScanResults } from "./utils/scanUtils";

export const VulnerabilityScanning = () => {
  const { toast } = useToast();
  const { user } = useAuth();
  
  const { data: scans, isLoading, refetch } = useQuery({
    queryKey: ["vulnerability-scans"],
    queryFn: async () => {
      console.log("Fetching vulnerability scans...");
      const { data, error } = await supabase
        .from('vulnerability_scans')
        .select('*')
        .eq('user_id', user?.id)
        .order('created_at', { ascending: false })
        .limit(5);

      if (error) {
        console.error("Error fetching scans:", error);
        throw error;
      }
      
      return (data as any[]).map(scan => ({
        ...scan,
        severity_breakdown: scan.severity_breakdown || {
          critical: 0,
          high: 0,
          medium: 0,
          low: 0
        }
      }));
    },
    enabled: !!user?.id,
  });

  const startNewScan = async () => {
    if (!user?.id) {
      toast({
        title: "Error",
        description: "You must be logged in to start a scan.",
        variant: "destructive",
      });
      return;
    }

    try {
      const { data, error } = await supabase
        .from('vulnerability_scans')
        .insert({
          user_id: user.id,
          scan_type: 'full',
          status: 'in_progress',
          start_time: new Date().toISOString(),
          severity_breakdown: {
            critical: 0,
            high: 0,
            medium: 0,
            low: 0
          },
          total_vulnerabilities: 0,
          findings: []
        })
        .select()
        .single();

      if (error) throw error;

      toast({
        title: "Scan Started",
        description: "Your security scan has been initiated.",
      });
      
      refetch();

      setTimeout(async () => {
        const mockResults = generateMockScanResults();
        
        const { error: updateError } = await supabase
          .from('vulnerability_scans')
          .update(mockResults)
          .eq('id', data.id);

        if (updateError) {
          console.error('Error updating scan results:', updateError);
          return;
        }

        refetch();
        
        toast({
          title: "Scan Completed",
          description: "Your security scan has finished. View the results below.",
        });
      }, 5000);

    } catch (error) {
      console.error('Error starting scan:', error);
      toast({
        title: "Error",
        description: "Failed to start security scan.",
        variant: "destructive",
      });
    }
  };

  return (
    <div className="space-y-4">
      <VulnerabilityScanHeader onStartScan={startNewScan} />
      <VulnerabilityScanList scans={scans} isLoading={isLoading} />
    </div>
  );
};