import { Card } from "@/components/ui/card";
import { useToast } from "@/hooks/use-toast";
import { useVulnerabilityScans } from "./hooks/useVulnerabilityScans";
import { VulnerabilityScanHeader } from "./components/vulnerability/VulnerabilityScanHeader";
import { VulnerabilityScanList } from "./components/vulnerability/VulnerabilityScanList";
import { ScanQuickActions } from "./components/vulnerability/ScanQuickActions";
import ErrorBoundary from "@/components/ErrorBoundary";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { supabase } from "@/integrations/supabase/client";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { AlertCircle } from "lucide-react";

export const VulnerabilityScanning = () => {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const { data: scans, isLoading, error } = useVulnerabilityScans();
  
  const { mutate: startScan, isPending: isScanning } = useMutation({
    mutationFn: async ({ scanType }: { scanType: 'quick' | 'deep' }) => {
      console.log('Starting scan with type:', scanType);
      
      // Get current user
      const { data: { user }, error: userError } = await supabase.auth.getUser();
      if (userError) {
        console.error("Auth error:", userError);
        throw new Error("Authentication failed");
      }
      
      if (!user) {
        throw new Error("User not authenticated");
      }

      // Get active services
      const { data: services, error: servicesError } = await supabase
        .from('client_services')
        .select('service_type, settings')
        .eq('user_id', user.id)
        .eq('is_active', true);

      if (servicesError) {
        console.error("Services error:", servicesError);
        throw new Error("Failed to fetch active services");
      }

      // Get package.json content (in a real implementation, this would be dynamically loaded)
      const projectData = {
        dependencies: {
          "@tanstack/react-query": "^5.0.0",
          "react": "^18.0.0",
          "tailwindcss": "^3.0.0"
        }
      };

      console.log('Invoking vulnerability-scan function with:', {
        user_id: user.id,
        scan_type: scanType,
        active_services: services,
        project_data: projectData
      });

      const { data, error: functionError } = await supabase.functions.invoke('vulnerability-scan', {
        body: {
          user_id: user.id,
          scan_type: scanType,
          active_services: services,
          project_data: projectData
        }
      });
        
      if (functionError) {
        console.error("Function error:", functionError);
        throw functionError;
      }

      console.log('Scan completed successfully:', data);
      return data;
    },
    onSuccess: (_, variables) => {
      queryClient.invalidateQueries({ queryKey: ['vulnerability-scans'] });
      toast({
        title: `${variables.scanType === 'deep' ? 'Deep' : 'Quick'} Scan Started`,
        description: "The vulnerability scan has been initiated. This may take a few minutes.",
      });
    },
    onError: (error: Error) => {
      console.error("Failed to start scan:", error);
      toast({
        title: "Scan Failed",
        description: error.message || "Failed to start vulnerability scan. Please try again.",
        variant: "destructive",
      });
    },
  });

  const handleStartScan = async (scanType: 'quick' | 'deep' = 'deep') => {
    try {
      await startScan({ scanType });
    } catch (error) {
      console.error("Failed to start scan:", error);
    }
  };

  if (error) {
    return (
      <Card className="p-6">
        <Alert variant="destructive">
          <AlertCircle className="h-4 w-4" />
          <AlertDescription>
            Error loading vulnerability scans: {error.message}
          </AlertDescription>
        </Alert>
      </Card>
    );
  }

  return (
    <ErrorBoundary>
      <Card className="p-6 space-y-6">
        <VulnerabilityScanHeader 
          onStartScan={() => handleStartScan('deep')} 
          isScanning={isScanning}
        />
        <ScanQuickActions 
          onStartScan={() => handleStartScan('quick')} 
          isScanning={isScanning}
        />
        <VulnerabilityScanList 
          scans={scans} 
          isLoading={isLoading}
        />
      </Card>
    </ErrorBoundary>
  );
};