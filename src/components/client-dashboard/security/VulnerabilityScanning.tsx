import { useToast } from "@/hooks/use-toast";
import { useAuth } from "@/hooks/useAuth";
import { supabase } from "@/integrations/supabase/client";
import { useVulnerabilityScans } from "./hooks/useVulnerabilityScans";
import { VulnerabilityScanList } from "./components/VulnerabilityScanList";
import { VulnerabilityScanHeader } from "./components/VulnerabilityScanHeader";
import { ReportQuickActions } from "../reporting/components/ReportQuickActions";

export const VulnerabilityScanning = () => {
  const { toast } = useToast();
  const { user } = useAuth();
  const { data: scans, isLoading, refetch } = useVulnerabilityScans();

  const startNewScan = async () => {
    if (!user?.id) {
      toast({
        title: "Error",
        description: "You must be logged in to start a scan.",
        variant: "destructive",
      });
      return;
    }

    try {
      toast({
        title: "Starting Scan",
        description: "Initializing security scan...",
      });

      const response = await supabase.functions.invoke('vulnerability-scan', {
        body: {
          user_id: user.id,
          scan_type: 'full',
          target_url: window.location.origin,
        },
      });

      if (response.error) {
        throw new Error(response.error.message);
      }

      toast({
        title: "Scan Started",
        description: "Your security scan has been initiated.",
      });
      
      refetch();

    } catch (error) {
      console.error('Error starting scan:', error);
      toast({
        title: "Error",
        description: "Failed to start security scan: " + (error as Error).message,
        variant: "destructive",
      });
    }
  };

  const isScanning = scans?.some(scan => scan.status === 'in_progress');

  return (
    <div className="space-y-4">
      <VulnerabilityScanHeader onStartScan={startNewScan} />
      <ReportQuickActions onStartScan={startNewScan} isScanning={isScanning} />
      <VulnerabilityScanList scans={scans} isLoading={isLoading} />
    </div>
  );
};