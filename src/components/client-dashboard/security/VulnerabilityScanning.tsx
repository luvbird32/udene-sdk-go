/**
 * VulnerabilityScanning Component
 * 
 * Displays and manages vulnerability scanning functionality, including scan history,
 * current scan status, and scan actions.
 * 
 * Features:
 * - Real-time scan status monitoring
 * - Scan history display
 * - Quick actions for starting new scans
 * - Loading state handling
 */
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { VulnerabilityScanList } from "./components/VulnerabilityScanList";
import { VulnerabilityScanHeader } from "./components/VulnerabilityScanHeader";
import { ReportQuickActions } from "../reporting/components/ReportQuickActions";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";
import { useState } from "react";

export const VulnerabilityScanning = () => {
  const [isScanning, setIsScanning] = useState(false);
  const { toast } = useToast();
  const queryClient = useQueryClient();

  const { data: scans, isLoading } = useQuery({
    queryKey: ['vulnerability-scans'],
    queryFn: async () => {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) throw new Error("User not authenticated");

      const { data, error } = await supabase
        .from('vulnerability_scans')
        .select('*')
        .eq('user_id', user.id)
        .order('created_at', { ascending: false });

      if (error) throw error;
      return data;
    }
  });

  const startScanMutation = useMutation({
    mutationFn: async () => {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) throw new Error("User not authenticated");

      const { data, error } = await supabase.functions.invoke('vulnerability-scan', {
        body: {
          user_id: user.id,
          scan_type: 'comprehensive',
          target_url: window.location.origin
        }
      });

      if (error) throw error;
      return data;
    },
    onMutate: () => {
      setIsScanning(true);
      toast({
        title: "Starting Scan",
        description: "Initializing security scan...",
      });
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['vulnerability-scans'] });
      toast({
        title: "Scan Started",
        description: "Vulnerability scan has been initiated successfully.",
      });
    },
    onError: (error: Error) => {
      console.error('Scan error:', error);
      toast({
        title: "Scan Failed",
        description: "Failed to start vulnerability scan. Please try again.",
        variant: "destructive",
      });
    },
    onSettled: () => {
      setIsScanning(false);
    }
  });

  const handleStartScan = async () => {
    try {
      await startScanMutation.mutateAsync();
    } catch (error) {
      console.error('Error starting scan:', error);
    }
  };

  return (
    <div className="space-y-4">
      <VulnerabilityScanHeader 
        onStartScan={handleStartScan} 
        isScanning={isScanning}
      />
      <ReportQuickActions 
        onStartScan={handleStartScan} 
        isScanning={isScanning} 
      />
      <VulnerabilityScanList 
        scans={scans} 
        isLoading={isLoading} 
      />
    </div>
  );
};