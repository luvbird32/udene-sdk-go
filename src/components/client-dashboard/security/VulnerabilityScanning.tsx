import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { useAuth } from '@/hooks/useAuth';
import { ScanProgress } from './vulnerability-scan/ScanProgress';
import { ScanResults } from './vulnerability-scan/ScanResults';
import { useVulnerabilityScan } from './vulnerability-scan/useVulnerabilityScan';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { AlertCircle, Info } from 'lucide-react';
import { useQuery } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useProject } from '@/contexts/ProjectContext';

export const VulnerabilityScanning = () => {
  const { user } = useAuth();
  const { currentProject } = useProject();
  const [scanType] = useState('full');
  const [services] = useState(['web', 'api']);

  const {
    scanProgress,
    scanMutation,
    isScanning,
    scanError,
    recentScans,
    isLoadingScans,
    scansError
  } = useVulnerabilityScan(user?.id);

  // Check for API keys
  const { data: apiKeys, isLoading: isLoadingApiKeys } = useQuery({
    queryKey: ['client-api-keys', currentProject?.id],
    queryFn: async () => {
      if (!currentProject?.id) return [];
      const { data, error } = await supabase
        .from('client_api_keys')
        .select('*')
        .eq('project_id', currentProject.id);
      if (error) throw error;
      return data;
    },
    enabled: !!currentProject?.id,
  });

  // Check for activated services
  const { data: activeServices, isLoading: isLoadingServices } = useQuery({
    queryKey: ['client-services', currentProject?.id],
    queryFn: async () => {
      if (!currentProject?.id) return [];
      const { data, error } = await supabase
        .from('client_services')
        .select('*')
        .eq('project_id', currentProject.id)
        .eq('is_active', true);
      if (error) throw error;
      return data;
    },
    enabled: !!currentProject?.id,
  });

  const isLoading = isLoadingApiKeys || isLoadingServices;

  // Validation checks
  const hasApiKeys = (apiKeys?.length ?? 0) > 0;
  const hasActiveServices = (activeServices?.length ?? 0) > 0;
  const hasProject = !!currentProject;

  const getValidationError = () => {
    if (!hasProject) {
      return {
        title: "No Project Selected",
        description: "Please create or select a project before running a vulnerability scan."
      };
    }
    if (!hasApiKeys) {
      return {
        title: "No API Keys Found",
        description: "You need to generate API keys for your project before running a scan."
      };
    }
    if (!hasActiveServices) {
      return {
        title: "No Active Services",
        description: "Please activate at least one service from the services section before scanning."
      };
    }
    return null;
  };

  const validationError = getValidationError();

  const handleScan = () => {
    if (!user?.id || validationError) return;
    scanMutation.mutate({ scanType, services });
  };

  // Show auth required message if no user
  if (!user?.id) {
    return (
      <Alert variant="destructive">
        <AlertCircle className="h-4 w-4" />
        <AlertDescription>
          You must be logged in to perform vulnerability scans.
        </AlertDescription>
      </Alert>
    );
  }

  if (isLoading) {
    return (
      <Alert>
        <Info className="h-4 w-4" />
        <AlertDescription>
          Checking system requirements...
        </AlertDescription>
      </Alert>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-bold">Vulnerability Scanning</h2>
        <Button 
          onClick={handleScan} 
          disabled={isScanning || !!validationError}
        >
          {isScanning ? 'Scanning...' : 'Start Scan'}
        </Button>
      </div>

      {validationError && (
        <Alert variant="destructive">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>{validationError.title}</AlertTitle>
          <AlertDescription>
            {validationError.description}
          </AlertDescription>
        </Alert>
      )}

      {scanProgress > 0 && <ScanProgress progress={scanProgress} />}

      {scanError && (
        <Alert variant="destructive">
          <AlertCircle className="h-4 w-4" />
          <AlertDescription>
            {scanError instanceof Error ? scanError.message : 'An error occurred during the scan'}
          </AlertDescription>
        </Alert>
      )}

      <ScanResults 
        results={recentScans}
        isLoading={isLoadingScans}
        error={scansError instanceof Error ? scansError : null}
      />
    </div>
  );
};