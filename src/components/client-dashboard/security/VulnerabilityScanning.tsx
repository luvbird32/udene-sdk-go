import { Card } from "@/components/ui/card";
import { useToast } from "@/hooks/use-toast";
import { useVulnerabilityScans } from "./hooks/useVulnerabilityScans";
import { VulnerabilityScanHeader } from "./components/vulnerability/VulnerabilityScanHeader";
import { VulnerabilityScanList } from "./components/vulnerability/VulnerabilityScanList";
import { ScanQuickActions } from "./components/vulnerability/ScanQuickActions";
import ErrorBoundary from "@/components/ErrorBoundary";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { supabase } from "@/integrations/supabase/client";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { AlertCircle, Shield } from "lucide-react";
import { Progress } from "@/components/ui/progress";
import { useState } from "react";
import { Badge } from "@/components/ui/badge";
import { generateDeviceFingerprint } from "@/utils/deviceFingerprint";

export const VulnerabilityScanning = () => {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const { data: scans, isLoading, error } = useVulnerabilityScans();
  const [scanProgress, setScanProgress] = useState(0);
  
  const { mutate: startScan, isPending: isScanning } = useMutation({
    mutationFn: async ({ scanType }: { scanType: 'quick' | 'deep' }) => {
      console.log('Starting scan with type:', scanType);
      setScanProgress(0);
      
      const { data: { user }, error: userError } = await supabase.auth.getUser();
      if (userError) {
        console.error("Auth error:", userError);
        throw new Error("Authentication failed");
      }
      
      if (!user) {
        throw new Error("User not authenticated");
      }

      // Get client system information
      const clientSystemInfo = await generateDeviceFingerprint();
      
      // Get active services
      const { data: services, error: servicesError } = await supabase
        .from('client_services')
        .select('service_type, settings')
        .eq('user_id', user.id)
        .eq('is_active', true);

      if (servicesError) {
        console.error("Services error:", servicesError);
        throw new Error("Failed to fetch active services");
      }

      const progressInterval = setInterval(() => {
        setScanProgress(prev => {
          if (prev >= 90) {
            clearInterval(progressInterval);
            return prev;
          }
          return prev + 10;
        });
      }, scanType === 'quick' ? 1000 : 2000);

      // Get installed dependencies from package.json if available
      const dependencies = {
        "@tanstack/react-query": "^5.0.0",
        "react": "^18.0.0",
        "tailwindcss": "^3.0.0"
      };

      try {
        const { data, error: functionError } = await supabase.functions.invoke('vulnerability-scan', {
          body: {
            user_id: user.id,
            scan_type: scanType,
            active_services: services,
            client_system_info: clientSystemInfo,
            client_dependencies: dependencies,
            client_platform: navigator.platform,
            client_sdk_version: '1.0.0'
          }
        });
          
        if (functionError) {
          console.error("Function error:", functionError);
          clearInterval(progressInterval);
          throw functionError;
        }

        setScanProgress(100);
        setTimeout(() => setScanProgress(0), 1000);
        clearInterval(progressInterval);
        return data;
      } catch (error) {
        clearInterval(progressInterval);
        throw error;
      }
    },
    onSuccess: (_, variables) => {
      queryClient.invalidateQueries({ queryKey: ['vulnerability-scans'] });
      toast({
        title: `${variables.scanType === 'deep' ? 'Deep' : 'Quick'} Scan Started`,
        description: "The vulnerability scan of your system has been initiated. This may take a few minutes.",
      });
    },
    onError: (error: Error) => {
      console.error("Failed to start scan:", error);
      setScanProgress(0);
      toast({
        title: "Scan Failed",
        description: error.message || "Failed to start vulnerability scan. Please try again.",
        variant: "destructive",
      });
    },
  });

  const handleStartScan = async (scanType: 'quick' | 'deep' = 'deep') => {
    try {
      await startScan({ scanType });
    } catch (error) {
      console.error("Failed to start scan:", error);
    }
  };

  if (error) {
    return (
      <Card className="p-6">
        <Alert variant="destructive">
          <AlertCircle className="h-4 w-4" />
          <AlertDescription>
            Error loading vulnerability scans: {error.message}
          </AlertDescription>
        </Alert>
      </Card>
    );
  }

  const totalScans = scans?.length || 0;
  const criticalVulnerabilities = scans?.reduce((sum, scan) => 
    sum + (scan.severity_breakdown.critical || 0), 0) || 0;

  return (
    <ErrorBoundary>
      <Card className="p-6 space-y-6">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <Shield className="h-6 w-6 text-primary" />
            <div>
              <h3 className="text-lg font-semibold">System Security Monitoring</h3>
              <p className="text-sm text-muted-foreground">
                Scan your system for security vulnerabilities
              </p>
            </div>
          </div>
          <div className="flex gap-2">
            <Badge variant="outline">
              Total Scans: {totalScans}
            </Badge>
            {criticalVulnerabilities > 0 && (
              <Badge variant="destructive">
                Critical: {criticalVulnerabilities}
              </Badge>
            )}
          </div>
        </div>

        <VulnerabilityScanHeader 
          onStartScan={() => handleStartScan('deep')} 
          isScanning={isScanning}
        />

        {isScanning && (
          <div className="space-y-2">
            <Progress value={scanProgress} className="w-full" />
            <p className="text-sm text-muted-foreground text-center">
              {scanProgress < 100 ? 'Scanning your system...' : 'Scan complete!'}
            </p>
          </div>
        )}

        <ScanQuickActions 
          onStartScan={() => handleStartScan('quick')} 
          isScanning={isScanning}
        />

        <VulnerabilityScanList 
          scans={scans} 
          isLoading={isLoading}
        />
      </Card>
    </ErrorBoundary>
  );
};