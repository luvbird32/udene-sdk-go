import { useQuery } from "@tanstack/react-query";
import { supabase } from "@/integrations/supabase/client";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { Loader2, Shield, AlertTriangle } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { useAuth } from "@/hooks/useAuth";

interface VulnerabilityScan {
  id: string;
  scan_type: string;
  status: string;
  start_time: string;
  end_time: string | null;
  total_vulnerabilities: number;
  severity_breakdown: {
    critical: number;
    high: number;
    medium: number;
    low: number;
  };
  findings: any[];
}

export const VulnerabilityScanning = () => {
  const { toast } = useToast();
  const { user } = useAuth();
  
  const { data: scans, isLoading } = useQuery({
    queryKey: ["vulnerability-scans"],
    queryFn: async () => {
      const { data, error } = await supabase
        .from('vulnerability_scans')
        .select('*')
        .order('created_at', { ascending: false })
        .limit(5);

      if (error) throw error;
      
      // Transform the data to ensure correct typing
      return (data as any[]).map(scan => ({
        ...scan,
        severity_breakdown: scan.severity_breakdown as VulnerabilityScan['severity_breakdown']
      })) as VulnerabilityScan[];
    },
  });

  const startNewScan = async () => {
    if (!user?.id) return;

    try {
      const { data, error } = await supabase
        .from('vulnerability_scans')
        .insert({
          user_id: user.id,
          scan_type: 'full',
          status: 'pending',
          severity_breakdown: {
            critical: 0,
            high: 0,
            medium: 0,
            low: 0
          }
        })
        .select()
        .single();

      if (error) throw error;

      toast({
        title: "Scan Started",
        description: "Your security scan has been initiated.",
      });
    } catch (error) {
      console.error('Error starting scan:', error);
      toast({
        title: "Error",
        description: "Failed to start security scan.",
        variant: "destructive",
      });
    }
  };

  if (isLoading) {
    return (
      <Card className="p-6 flex justify-center items-center">
        <Loader2 className="h-6 w-6 animate-spin" />
      </Card>
    );
  }

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <h3 className="text-lg font-semibold flex items-center gap-2">
          <Shield className="h-5 w-5 text-primary" />
          Vulnerability Scanning
        </h3>
        <Button onClick={startNewScan}>Start New Scan</Button>
      </div>

      {scans?.map((scan) => (
        <Card key={scan.id} className="p-4 space-y-4">
          <div className="flex items-start justify-between">
            <div>
              <h4 className="font-medium">
                {scan.scan_type.charAt(0).toUpperCase() + scan.scan_type.slice(1)} Scan
              </h4>
              <p className="text-sm text-muted-foreground">
                Started: {new Date(scan.start_time).toLocaleString()}
              </p>
            </div>
            {scan.total_vulnerabilities > 0 && (
              <AlertTriangle className="h-5 w-5 text-yellow-500" />
            )}
          </div>

          <div className="space-y-2">
            <div className="flex justify-between text-sm">
              <span>Status: {scan.status}</span>
              <span className="font-medium">
                {scan.total_vulnerabilities} vulnerabilities found
              </span>
            </div>

            <div className="grid grid-cols-2 gap-2 text-sm">
              <div className="flex justify-between">
                <span>Critical:</span>
                <span className="text-red-500 font-medium">
                  {scan.severity_breakdown.critical}
                </span>
              </div>
              <div className="flex justify-between">
                <span>High:</span>
                <span className="text-orange-500 font-medium">
                  {scan.severity_breakdown.high}
                </span>
              </div>
              <div className="flex justify-between">
                <span>Medium:</span>
                <span className="text-yellow-500 font-medium">
                  {scan.severity_breakdown.medium}
                </span>
              </div>
              <div className="flex justify-between">
                <span>Low:</span>
                <span className="text-green-500 font-medium">
                  {scan.severity_breakdown.low}
                </span>
              </div>
            </div>

            {scan.status === 'in_progress' && (
              <Progress value={45} className="h-2" />
            )}
          </div>
        </Card>
      ))}

      {(!scans || scans.length === 0) && (
        <Card className="p-6 text-center text-muted-foreground">
          No vulnerability scans found. Start a new scan to check your application security.
        </Card>
      )}
    </div>
  );
};