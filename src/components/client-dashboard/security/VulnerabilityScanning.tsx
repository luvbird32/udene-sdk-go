import { useQuery } from "@tanstack/react-query";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";
import { useAuth } from "@/hooks/useAuth";
import { VulnerabilityScanList } from "./components/VulnerabilityScanList";
import { VulnerabilityScanHeader } from "./components/VulnerabilityScanHeader";
import { ReportQuickActions } from "@/components/client-dashboard/reporting/components/ReportQuickActions";
import { SeverityBreakdown, VulnerabilityDetail, VulnerabilityScan } from "./types";

export const VulnerabilityScanning = () => {
  const { toast } = useToast();
  const { user } = useAuth();
  
  const { data: scans, isLoading, refetch } = useQuery({
    queryKey: ["vulnerability-scans"],
    queryFn: async () => {
      console.log("Fetching vulnerability scans...");
      const { data, error } = await supabase
        .from('vulnerability_scans')
        .select('*')
        .eq('user_id', user?.id)
        .order('created_at', { ascending: false })
        .limit(5);

      if (error) {
        console.error("Error fetching scans:", error);
        throw error;
      }
      
      // Transform the data to ensure correct typing
      return (data || []).map((scan): VulnerabilityScan => {
        // Ensure severity_breakdown has the correct shape
        const defaultSeverityBreakdown: SeverityBreakdown = {
          critical: 0,
          high: 0,
          medium: 0,
          low: 0
        };

        let severityBreakdown = defaultSeverityBreakdown;
        
        // Safely handle the severity_breakdown conversion
        if (scan.severity_breakdown && typeof scan.severity_breakdown === 'object' && !Array.isArray(scan.severity_breakdown)) {
          const sb = scan.severity_breakdown as Record<string, unknown>;
          severityBreakdown = {
            critical: typeof sb.critical === 'number' ? sb.critical : 0,
            high: typeof sb.high === 'number' ? sb.high : 0,
            medium: typeof sb.medium === 'number' ? sb.medium : 0,
            low: typeof sb.low === 'number' ? sb.low : 0
          };
        }

        return {
          ...scan,
          severity_breakdown: severityBreakdown,
          findings: Array.isArray(scan.findings) ? scan.findings.map((finding: any): VulnerabilityDetail => ({
            id: String(finding.id || ''),
            name: String(finding.name || ''),
            description: String(finding.description || ''),
            severity: finding.severity as VulnerabilityDetail['severity'] || 'low',
            cve_id: finding.cve_id ? String(finding.cve_id) : undefined,
            affected_component: String(finding.affected_component || ''),
            remediation_steps: Array.isArray(finding.remediation_steps) 
              ? finding.remediation_steps.map(String) 
              : [],
            references: Array.isArray(finding.references) 
              ? finding.references.map(String) 
              : [],
            discovered_at: String(finding.discovered_at || new Date().toISOString())
          })) : []
        };
      });
    },
    enabled: !!user?.id,
  });

  const startNewScan = async () => {
    if (!user?.id) {
      toast({
        title: "Error",
        description: "You must be logged in to start a scan.",
        variant: "destructive",
      });
      return;
    }

    try {
      toast({
        title: "Starting Scan",
        description: "Initializing security scan...",
      });

      const response = await supabase.functions.invoke('vulnerability-scan', {
        body: {
          user_id: user.id,
          scan_type: 'full',
          target_url: window.location.origin,
        },
      });

      if (response.error) {
        throw new Error(response.error.message);
      }

      toast({
        title: "Scan Started",
        description: "Your security scan has been initiated.",
      });
      
      refetch();

    } catch (error) {
      console.error('Error starting scan:', error);
      toast({
        title: "Error",
        description: "Failed to start security scan: " + error.message,
        variant: "destructive",
      });
    }
  };

  const isScanning = scans?.some(scan => scan.status === 'in_progress');

  return (
    <div className="space-y-4">
      <VulnerabilityScanHeader onStartScan={startNewScan} />
      <ReportQuickActions onStartScan={startNewScan} isScanning={isScanning} />
      <VulnerabilityScanList scans={scans} isLoading={isLoading} />
    </div>
  );
};