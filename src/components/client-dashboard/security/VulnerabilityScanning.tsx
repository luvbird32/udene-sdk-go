import { Card } from "@/components/ui/card";
import { useToast } from "@/hooks/use-toast";
import { useVulnerabilityScans } from "./hooks/useVulnerabilityScans";
import { VulnerabilityScanHeader } from "./components/vulnerability/VulnerabilityScanHeader";
import { VulnerabilityScanList } from "./components/vulnerability/VulnerabilityScanList";
import { ScanQuickActions } from "./components/vulnerability/ScanQuickActions";
import ErrorBoundary from "@/components/ErrorBoundary";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { supabase } from "@/integrations/supabase/client";

export const VulnerabilityScanning = () => {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const { data: scans, isLoading, error } = useVulnerabilityScans();
  
  const { mutate: startScan, isPending: isScanning } = useMutation({
    mutationFn: async () => {
      // Get package.json content
      const projectData = {
        dependencies: {
          // In a real implementation, this would be dynamically loaded
          // from the actual project
          "@tanstack/react-query": "^5.0.0",
          "react": "^18.0.0",
          "tailwindcss": "^3.0.0"
        }
      };

      const { data: { user } } = await supabase.auth.getUser();
      if (!user) throw new Error("User not authenticated");

      const { data, error } = await supabase.functions.invoke('vulnerability-scan', {
        body: {
          user_id: user.id,
          scan_type: 'deep',
          project_data: projectData
        }
      });
        
      if (error) throw error;
      return data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['vulnerability-scans'] });
      toast({
        title: "Deep Scan Started",
        description: "The vulnerability scan has been initiated. This may take a few minutes.",
      });
    },
    onError: (error) => {
      console.error("Failed to start scan:", error);
      toast({
        title: "Error",
        description: "Failed to start vulnerability scan. Please try again.",
        variant: "destructive",
      });
    },
  });

  const handleStartScan = async () => {
    try {
      await startScan();
    } catch (error) {
      console.error("Failed to start scan:", error);
    }
  };

  if (error) {
    return (
      <Card className="p-6">
        <div className="text-center text-red-500">
          <p>Error loading vulnerability scans: {error.message}</p>
        </div>
      </Card>
    );
  }

  return (
    <ErrorBoundary>
      <Card className="p-6 space-y-6">
        <VulnerabilityScanHeader 
          onStartScan={handleStartScan} 
          isScanning={isScanning}
        />
        <ScanQuickActions 
          onStartScan={handleStartScan} 
          isScanning={isScanning}
        />
        <VulnerabilityScanList 
          scans={scans} 
          isLoading={isLoading}
        />
      </Card>
    </ErrorBoundary>
  );
};