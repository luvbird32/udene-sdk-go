import { useQuery } from "@tanstack/react-query";
import { supabase } from "@/integrations/supabase/client";
import { Button } from "@/components/ui/button";
import { Shield } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { useAuth } from "@/hooks/useAuth";
import { VulnerabilityScanList } from "./components/VulnerabilityScanList";

interface VulnerabilityScan {
  id: string;
  scan_type: string;
  status: string;
  start_time: string;
  end_time: string | null;
  total_vulnerabilities: number;
  severity_breakdown: {
    critical: number;
    high: number;
    medium: number;
    low: number;
  };
  findings: any[];
}

export const VulnerabilityScanning = () => {
  const { toast } = useToast();
  const { user } = useAuth();
  
  const { data: scans, isLoading, refetch } = useQuery({
    queryKey: ["vulnerability-scans"],
    queryFn: async () => {
      console.log("Fetching vulnerability scans...");
      const { data, error } = await supabase
        .from('vulnerability_scans')
        .select('*')
        .eq('user_id', user?.id)
        .order('created_at', { ascending: false })
        .limit(5);

      if (error) {
        console.error("Error fetching scans:", error);
        throw error;
      }
      
      return (data as any[]).map(scan => ({
        ...scan,
        severity_breakdown: scan.severity_breakdown || {
          critical: 0,
          high: 0,
          medium: 0,
          low: 0
        }
      })) as VulnerabilityScan[];
    },
    enabled: !!user?.id,
  });

  const startNewScan = async () => {
    if (!user?.id) {
      toast({
        title: "Error",
        description: "You must be logged in to start a scan.",
        variant: "destructive",
      });
      return;
    }

    try {
      const { data, error } = await supabase
        .from('vulnerability_scans')
        .insert({
          user_id: user.id,
          scan_type: 'full',
          status: 'in_progress',
          start_time: new Date().toISOString(),
          severity_breakdown: {
            critical: 0,
            high: 0,
            medium: 0,
            low: 0
          },
          total_vulnerabilities: 0,
          findings: []
        })
        .select()
        .single();

      if (error) throw error;

      toast({
        title: "Scan Started",
        description: "Your security scan has been initiated.",
      });
      
      refetch();

      // Simulate scan progress (in a real app, this would be handled by a backend service)
      setTimeout(async () => {
        const mockResults = {
          status: 'completed',
          end_time: new Date().toISOString(),
          total_vulnerabilities: Math.floor(Math.random() * 10),
          severity_breakdown: {
            critical: Math.floor(Math.random() * 3),
            high: Math.floor(Math.random() * 4),
            medium: Math.floor(Math.random() * 5),
            low: Math.floor(Math.random() * 6)
          },
          findings: []
        };

        const { error: updateError } = await supabase
          .from('vulnerability_scans')
          .update(mockResults)
          .eq('id', data.id);

        if (updateError) {
          console.error('Error updating scan results:', updateError);
          return;
        }

        refetch();
        
        toast({
          title: "Scan Completed",
          description: "Your security scan has finished. View the results below.",
        });
      }, 5000);

    } catch (error) {
      console.error('Error starting scan:', error);
      toast({
        title: "Error",
        description: "Failed to start security scan.",
        variant: "destructive",
      });
    }
  };

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <h3 className="text-lg font-semibold flex items-center gap-2">
          <Shield className="h-5 w-5 text-primary" />
          Vulnerability Scanning
        </h3>
        <Button onClick={startNewScan}>Start New Scan</Button>
      </div>

      <VulnerabilityScanList scans={scans} isLoading={isLoading} />
    </div>
  );
};