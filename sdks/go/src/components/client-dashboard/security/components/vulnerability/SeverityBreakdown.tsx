import { Progress } from "@/components/ui/progress";
import { Card } from "@/components/ui/card";
import { Shield, AlertTriangle, Info } from "lucide-react";
import { Tooltip, TooltipContent, TooltipTrigger, TooltipProvider } from "@/components/ui/tooltip";

interface SeverityBreakdownProps {
  breakdown: {
    critical: number;
    high: number;
    medium: number;
    low: number;
  };
  total: number;
}

export const SeverityBreakdown = ({ breakdown, total }: SeverityBreakdownProps) => {
  const getPercentage = (count: number): number => {
    if (!total || total === 0 || !count || isNaN(count)) return 0;
    const percentage = (count / total) * 100;
    return isNaN(percentage) ? 0 : Math.round(percentage);
  };

  const severityInfo = [
    {
      label: "Critical",
      count: breakdown.critical,
      icon: <AlertTriangle className="h-4 w-4 text-red-500" />,
      description: "Immediate attention required - High risk vulnerabilities",
      progressClass: "bg-red-200",
      progressFillClass: "bg-red-500",
    },
    {
      label: "High",
      count: breakdown.high,
      icon: <AlertTriangle className="h-4 w-4 text-orange-500" />,
      description: "Urgent attention needed - Significant security risks",
      progressClass: "bg-orange-200",
      progressFillClass: "bg-orange-500",
    },
    {
      label: "Medium",
      count: breakdown.medium,
      icon: <Shield className="h-4 w-4 text-yellow-500" />,
      description: "Should be addressed - Moderate security concerns",
      progressClass: "bg-yellow-200",
      progressFillClass: "bg-yellow-500",
    },
    {
      label: "Low",
      count: breakdown.low,
      icon: <Info className="h-4 w-4 text-blue-500" />,
      description: "Minor security issues - Can be addressed over time",
      progressClass: "bg-blue-200",
      progressFillClass: "bg-blue-500",
    },
  ];

  return (
    <Card className="p-6">
      <h3 className="text-lg font-semibold mb-4">Severity Breakdown</h3>
      <TooltipProvider>
        <div className="space-y-4">
          {severityInfo.map((severity) => (
            <div key={severity.label} className="space-y-2">
              <Tooltip>
                <TooltipTrigger className="w-full">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-2">
                      {severity.icon}
                      <span className="font-medium">{severity.label}</span>
                    </div>
                    <span className="text-sm text-muted-foreground">
                      {severity.count} ({getPercentage(severity.count)}%)
                    </span>
                  </div>
                </TooltipTrigger>
                <TooltipContent>
                  <p>{severity.description}</p>
                </TooltipContent>
              </Tooltip>
              <Progress 
                value={getPercentage(severity.count)} 
                className={`h-2 ${severity.progressClass}`}
              >
                <div 
                  className={`h-full transition-all ${severity.progressFillClass}`} 
                  style={{ width: `${getPercentage(severity.count)}%` }} 
                />
              </Progress>
            </div>
          ))}
        </div>
      </TooltipProvider>
    </Card>
  );
};