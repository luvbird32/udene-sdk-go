import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { AlertTriangle, Link as LinkIcon, Shield, Info } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Tooltip, TooltipContent, TooltipTrigger } from "@/components/ui/tooltip";
import { ScrollArea } from "@/components/ui/scroll-area";

interface Finding {
  id: string;
  name: string;
  description: string;
  severity: 'critical' | 'high' | 'medium' | 'low';
  cve_id?: string;
  affected_component: string;
  remediation_steps: string[];
  references: string[];
}

interface FindingDetailsProps {
  finding: Finding;
}

export const FindingDetails = ({ finding }: FindingDetailsProps) => {
  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical':
        return 'bg-red-500/10 text-red-500 border-red-500/20';
      case 'high':
        return 'bg-orange-500/10 text-orange-500 border-orange-500/20';
      case 'medium':
        return 'bg-yellow-500/10 text-yellow-500 border-yellow-500/20';
      case 'low':
        return 'bg-blue-500/10 text-blue-500 border-blue-500/20';
      default:
        return 'bg-gray-500/10 text-gray-500 border-gray-500/20';
    }
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'critical':
        return <AlertTriangle className="h-5 w-5 text-red-500" />;
      case 'high':
        return <AlertTriangle className="h-5 w-5 text-orange-500" />;
      case 'medium':
        return <Shield className="h-5 w-5 text-yellow-500" />;
      case 'low':
        return <Info className="h-5 w-5 text-blue-500" />;
      default:
        return <Info className="h-5 w-5 text-gray-500" />;
    }
  };

  return (
    <Card className="p-6 space-y-6">
      <div className="flex items-start justify-between">
        <div className="flex items-start gap-3">
          {getSeverityIcon(finding.severity)}
          <div>
            <h4 className="font-semibold text-lg">{finding.name}</h4>
            <div className="flex gap-2 mt-1">
              <Badge variant="outline" className={getSeverityColor(finding.severity)}>
                {finding.severity.toUpperCase()}
              </Badge>
              {finding.cve_id && (
                <Badge variant="outline" className="font-mono">
                  {finding.cve_id}
                </Badge>
              )}
            </div>
          </div>
        </div>
      </div>

      <div className="space-y-4">
        <div className="bg-muted/50 p-4 rounded-lg">
          <p className="text-sm text-muted-foreground">{finding.description}</p>
        </div>

        <div>
          <h5 className="font-medium mb-2 flex items-center gap-2">
            <Shield className="h-4 w-4 text-primary" />
            Affected Component
          </h5>
          <p className="text-sm bg-muted/30 p-2 rounded">{finding.affected_component}</p>
        </div>

        {finding.remediation_steps.length > 0 && (
          <div>
            <h5 className="font-medium mb-2 flex items-center gap-2">
              <AlertTriangle className="h-4 w-4 text-warning" />
              Remediation Steps
            </h5>
            <ScrollArea className="h-[200px] w-full rounded-md border p-4">
              <ol className="list-decimal list-inside space-y-2">
                {finding.remediation_steps.map((step, index) => (
                  <li key={index} className="text-sm">
                    {step}
                  </li>
                ))}
              </ol>
            </ScrollArea>
          </div>
        )}

        {finding.references.length > 0 && (
          <div>
            <h5 className="font-medium mb-2 flex items-center gap-2">
              <LinkIcon className="h-4 w-4 text-primary" />
              References
            </h5>
            <div className="flex flex-wrap gap-2">
              {finding.references.map((ref, index) => (
                <Tooltip key={index}>
                  <TooltipTrigger asChild>
                    <Button
                      variant="outline"
                      size="sm"
                      className="text-xs"
                      onClick={() => window.open(ref, '_blank')}
                    >
                      <LinkIcon className="h-3 w-3 mr-1" />
                      Reference {index + 1}
                    </Button>
                  </TooltipTrigger>
                  <TooltipContent>
                    <p className="max-w-xs break-all">{ref}</p>
                  </TooltipContent>
                </Tooltip>
              ))}
            </div>
          </div>
        )}
      </div>
    </Card>
  );
};