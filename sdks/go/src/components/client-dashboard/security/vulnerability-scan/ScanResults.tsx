import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { AlertCircle, CheckCircle } from "lucide-react";
import { ScanResult } from "./types";

interface ScanResultsProps {
  results: ScanResult[];
  isLoading: boolean;
  error: Error | null;
}

export const ScanResults = ({ results, isLoading, error }: ScanResultsProps) => {
  if (isLoading) {
    return <div className="animate-pulse">Loading recent scans...</div>;
  }

  if (error) {
    return (
      <Alert variant="destructive">
        <AlertCircle className="h-4 w-4" />
        <AlertTitle>Error</AlertTitle>
        <AlertDescription>
          {error instanceof Error ? error.message : "Failed to load scan results"}
        </AlertDescription>
      </Alert>
    );
  }

  if (!results.length) {
    return (
      <Alert>
        <CheckCircle className="h-4 w-4" />
        <AlertTitle>No Scans</AlertTitle>
        <AlertDescription>
          No vulnerability scans have been performed yet.
        </AlertDescription>
      </Alert>
    );
  }

  return (
    <div className="space-y-4">
      <h3 className="text-lg font-semibold">Recent Scans</h3>
      <div className="grid gap-4">
        {results.map((scan) => (
          <div key={scan.id} className="p-4 border rounded-lg">
            <div className="flex justify-between items-start">
              <div>
                <h4 className="font-medium">Scan ID: {scan.id}</h4>
                <p className="text-sm text-gray-500">Status: {scan.status}</p>
              </div>
              <div className="text-sm">
                <p>Critical: {scan.severity_breakdown.critical}</p>
                <p>High: {scan.severity_breakdown.high}</p>
                <p>Medium: {scan.severity_breakdown.medium}</p>
                <p>Low: {scan.severity_breakdown.low}</p>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};