import { useQuery, useMutation } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useState } from 'react';

export const useVulnerabilityScan = (userId?: string) => {
  const [scanProgress, setScanProgress] = useState(0);

  // Only fetch scans if we have a userId
  const {
    data: recentScans,
    isLoading: isLoadingScans,
    error: scansError,
    refetch: refetchScans
  } = useQuery({
    queryKey: ['vulnerability-scans', userId],
    queryFn: async () => {
      if (!userId) throw new Error('User ID is required');
      
      const { data, error } = await supabase
        .from('vulnerability_scans')
        .select('*')
        .eq('user_id', userId)
        .order('created_at', { ascending: false })
        .limit(5);

      if (error) throw error;
      return data;
    },
    enabled: !!userId, // Only run query if userId exists
  });

  const scanMutation = useMutation({
    mutationFn: async ({ scanType, services }: { scanType: string; services: string[] }) => {
      if (!userId) throw new Error('User ID is required');

      // Start a new scan
      const { data, error } = await supabase
        .from('vulnerability_scans')
        .insert([
          {
            user_id: userId,
            scan_type: scanType,
            status: 'in_progress',
            scan_config: { services }
          }
        ])
        .select()
        .single();

      if (error) throw error;
      return data;
    },
    onSuccess: () => {
      refetchScans();
    },
  });

  return {
    scanProgress,
    scanMutation,
    isScanning: scanMutation.isPending,
    scanError: scanMutation.error,
    recentScans: recentScans || [],
    isLoadingScans,
    scansError
  };
};