interface ClientSystemVulnerability {
  id: string;
  name: string;
  description: string;
  severity: 'critical' | 'high' | 'medium' | 'low';
  affected_component: string;
  remediation_steps: string[];
}

interface SystemAnalysisResult {
  vulnerabilities: ClientSystemVulnerability[];
}

export async function analyzeClientSystem(
  systemInfo: any,
  isDeepScan: boolean
): Promise<SystemAnalysisResult> {
  console.log('Analyzing client system:', systemInfo);
  
  const vulnerabilities: ClientSystemVulnerability[] = [];

  // Analyze browser information
  if (systemInfo.browser_info) {
    const browserVulns = analyzeBrowserSecurity(systemInfo.browser_info);
    vulnerabilities.push(...browserVulns);
  }

  // Analyze hardware information
  if (systemInfo.hardware_info) {
    const hardwareVulns = analyzeHardwareSecurity(systemInfo.hardware_info);
    vulnerabilities.push(...hardwareVulns);
  }

  // Analyze network information
  if (systemInfo.network_info) {
    const networkVulns = analyzeNetworkSecurity(systemInfo.network_info);
    vulnerabilities.push(...networkVulns);
  }

  // Deep scan additional checks
  if (isDeepScan) {
    // Add additional deep scan checks here
    if (systemInfo.canvas_fingerprint) {
      const canvasVulns = analyzeCanvasSecurity(systemInfo.canvas_fingerprint);
      vulnerabilities.push(...canvasVulns);
    }

    if (systemInfo.webgl_fingerprint) {
      const webglVulns = analyzeWebGLSecurity(systemInfo.webgl_fingerprint);
      vulnerabilities.push(...webglVulns);
    }
  }

  return { vulnerabilities };
}

function analyzeBrowserSecurity(browserInfo: any): ClientSystemVulnerability[] {
  const vulnerabilities: ClientSystemVulnerability[] = [];

  // Check for outdated browsers
  if (!browserInfo.userAgent.includes('Chrome/')) {
    vulnerabilities.push({
      id: 'BROWSER-001',
      name: 'Potentially Outdated Browser',
      description: 'Your browser may not have the latest security updates.',
      severity: 'medium',
      affected_component: 'Web Browser',
      remediation_steps: [
        'Update your browser to the latest version',
        'Enable automatic browser updates'
      ]
    });
  }

  // Check cookie settings
  if (!browserInfo.cookiesEnabled) {
    vulnerabilities.push({
      id: 'BROWSER-002',
      name: 'Cookies Disabled',
      description: 'Cookies are disabled which may affect security features.',
      severity: 'low',
      affected_component: 'Browser Security Settings',
      remediation_steps: [
        'Enable cookies for essential website functionality',
        'Configure cookie settings to allow necessary security features'
      ]
    });
  }

  return vulnerabilities;
}

function analyzeHardwareSecurity(hardwareInfo: any): ClientSystemVulnerability[] {
  const vulnerabilities: ClientSystemVulnerability[] = [];

  // Check for limited resources
  if (hardwareInfo.deviceMemory && hardwareInfo.deviceMemory < 4) {
    vulnerabilities.push({
      id: 'HW-001',
      name: 'Limited Device Memory',
      description: 'Low memory may impact security feature performance.',
      severity: 'low',
      affected_component: 'System Resources',
      remediation_steps: [
        'Close unnecessary applications',
        'Consider upgrading system memory'
      ]
    });
  }

  return vulnerabilities;
}

function analyzeNetworkSecurity(networkInfo: any): ClientSystemVulnerability[] {
  const vulnerabilities: ClientSystemVulnerability[] = [];

  // Check for insecure network conditions
  if (networkInfo.effectiveType === 'slow-2g' || networkInfo.effectiveType === '2g') {
    vulnerabilities.push({
      id: 'NET-001',
      name: 'Slow Network Connection',
      description: 'Slow network may timeout during security operations.',
      severity: 'medium',
      affected_component: 'Network Connection',
      remediation_steps: [
        'Connect to a faster network',
        'Avoid performing sensitive operations on slow connections'
      ]
    });
  }

  return vulnerabilities;
}

function analyzeCanvasSecurity(canvasFingerprint: string): ClientSystemVulnerability[] {
  const vulnerabilities: ClientSystemVulnerability[] = [];

  // Add canvas-specific security checks
  if (canvasFingerprint.length < 50) {
    vulnerabilities.push({
      id: 'CANVAS-001',
      name: 'Limited Canvas Support',
      description: 'Limited canvas support may affect security features.',
      severity: 'low',
      affected_component: 'Browser Capabilities',
      remediation_steps: [
        'Update your browser to the latest version',
        'Enable hardware acceleration if available'
      ]
    });
  }

  return vulnerabilities;
}

function analyzeWebGLSecurity(webglFingerprint: string): ClientSystemVulnerability[] {
  const vulnerabilities: ClientSystemVulnerability[] = [];

  // Add WebGL-specific security checks
  if (!webglFingerprint) {
    vulnerabilities.push({
      id: 'WEBGL-001',
      name: 'WebGL Not Available',
      description: 'WebGL is not available which may indicate security restrictions.',
      severity: 'low',
      affected_component: 'Graphics Capabilities',
      remediation_steps: [
        'Enable WebGL in browser settings',
        'Update graphics drivers'
      ]
    });
  }

  return vulnerabilities;
}