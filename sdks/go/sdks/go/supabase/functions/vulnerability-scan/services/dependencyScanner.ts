import { DependencyResult, Finding } from "../types.ts";

export function analyzeDependencies(
  dependencies: Record<string, string>,
  isDeepScan: boolean
): DependencyResult[] {
  console.log('Analyzing dependencies:', dependencies);
  
  return Object.entries(dependencies).map(([name, version]) => {
    const vulnerabilities: Finding[] = [];
    
    // Basic version check (example)
    if (version.startsWith('^')) {
      vulnerabilities.push({
        name: 'Loose Version Dependency',
        description: `Package ${name} uses caret (^) version which may lead to unexpected updates`,
        severity: 'low',
        affected_component: name,
        remediation_steps: ['Lock the dependency to a specific version'],
        discovered_at: new Date().toISOString()
      });
    }

    // Deep scan additional checks
    if (isDeepScan) {
      // Add more thorough checks for deep scans
      if (version.includes('beta') || version.includes('alpha')) {
        vulnerabilities.push({
          name: 'Pre-release Dependency',
          description: `Package ${name} is using a pre-release version`,
          severity: 'medium',
          affected_component: name,
          remediation_steps: ['Update to a stable version'],
          discovered_at: new Date().toISOString()
        });
      }
    }

    return {
      name,
      version,
      vulnerabilities
    };
  });
}